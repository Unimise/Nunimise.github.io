<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>●(六儿)●</title>
  <subtitle>烟花再亮~也不及梦想</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-09-25T12:13:17.779Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小六</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTP协议</title>
    <link href="http://yoursite.com/2016/09/25/HTTP%E5%8D%8F%E8%AE%AE/"/>
    <id>http://yoursite.com/2016/09/25/HTTP协议/</id>
    <published>2016-09-25T11:46:57.000Z</published>
    <updated>2016-09-25T12:13:17.779Z</updated>
    
    <content type="html"><![CDATA[<p>超文本传输协议（HTTP协议）：访问万维网使用的核心通信协议，也是今天所有web应用程序使用的通讯协议<br><a id="more"></a><br>http使用一种基于消息的模型：客户端送出一条请求消息，而后由服务器返回一条响应消息<br>所有HTTP消息（请求与响应）中都包含一个或几个单行显示的消息头，然后是一个强制空白行，最后是消息主体（可选）。    </p>
<h3 id="一、HTTP请求信息由三部分组成"><a href="#一、HTTP请求信息由三部分组成" class="headerlink" title="一、HTTP请求信息由三部分组成"></a>一、HTTP请求信息由三部分组成</h3><p>HTTP请求的典型实例：<br><img src="http://i.imgur.com/cimo5Ep.png" alt="">    </p>
<p><img src="http://i.imgur.com/pFPDnel.png" alt=""></p>
<p>重要：每个HTTP请求的第一行都有3个以上空格间隔的项目组成。 </p>
<h4 id="1、请求方法URI协议版本"><a href="#1、请求方法URI协议版本" class="headerlink" title="1、请求方法URI协议版本"></a>1、请求方法URI协议版本</h4><p>例子中GET代表请求方法<br>/auth/488/yourdetails.ashx?uid-129是URI，URL通常由所请求的资源名称，以及一个包含客户端向该资源提交的参数可选查询字符组成。HTTP/1.1 代表协议和协议版本。<br>根据HTTP标准，HTTP请求可以使用多种请求方法。例如：HTTP1.1支持7种请求方法：GET、POST、HEAD、OPTIONS、PUT、DELETE和TARCE。在Internet应用中，最常用的方法是GET和POST。<br>因特网上常用的HTTP版本为1.0和1.1，多数浏览器默认使用1.1版本。这两个版本的规范之间存在一些差异；然而，当攻击Web应用程序时，渗透测试员可能遇到的唯一 差异是1.1版本必须使用Host请求头。</p>
<h4 id="2、请求头"><a href="#2、请求头" class="headerlink" title="2、请求头"></a>2、请求头</h4><p>请求头包含许多有关的客户端环境和请求正文的有用信息。例如，请求头可以声明浏览器所用的语言，请求正文的长度等。</p>
<h4 id="3、请求正文"><a href="#3、请求正文" class="headerlink" title="3、请求正文"></a>3、请求正文</h4><p>请求头和请求正文之间是一个空行，这个行非常重要，它表示请求头已经结束，接下来的是请求正文。请求正文中可以包含客户提交的查询字符串信息。</p>
<h3 id="二、HTTP响应信息由三部分组成"><a href="#二、HTTP响应信息由三部分组成" class="headerlink" title="二、HTTP响应信息由三部分组成"></a>二、HTTP响应信息由三部分组成</h3><p>HTTP响应实例：</p>
<p><img src="http://i.imgur.com/NIirsFG.png" alt=""></p>
<h4 id="1、协议状态版本代码描述"><a href="#1、协议状态版本代码描述" class="headerlink" title="1、协议状态版本代码描述"></a>1、协议状态版本代码描述</h4><p>协议状态代码描述HTTP响应的第一行类似于HTTP请求的第一行，它表示通信所用的协议是HTTP1.1服务器已经成功的处理了客户端发出的请求（200表示成功）:<br>HTTP/1.1 200 OK</p>
<h4 id="2、响应头-Response-Header"><a href="#2、响应头-Response-Header" class="headerlink" title="2、响应头(Response Header)"></a>2、响应头(Response Header)</h4><p>响应头(Response Header)响应头也和请求头一样包含许多有用的信息，例如服务器类型、日期时间、内容类型和长度等：</p>
<h4 id="3、响应正文"><a href="#3、响应正文" class="headerlink" title="3、响应正文"></a>3、响应正文</h4><p>响应正文响应正文就是服务器返回的HTML页面<br>重点：响应头和正文之间也必须用空行分隔。<br>每个HTTP响应的第一行由三个以上空格间隔的项目组成</p>
<h3 id="三、HTTP方法："><a href="#三、HTTP方法：" class="headerlink" title="三、HTTP方法："></a>三、HTTP方法：</h3><p>当渗透测试员攻击Web应用程序时，几乎肯定会遇到最常用的方法：GET和POST。这些方法之间存在一些必须了解的重要差异，忽略这些差异可能会危及应用程序的安全。    </p>
<h4 id="GET方法"><a href="#GET方法" class="headerlink" title="GET方法"></a>GET方法</h4><p>从web服务器获取资源，它可以用于URL查询字符串的形式向所请求的资源发送参数。这使用户可将一个包含动态资源的URL标注为书签，用户自己或其它用户随后可重复利用该书签来获取等价的资源。URL显示在屏幕上，并被记录在许多地方，如浏览器的历史记录和Web服务器的访问日志中。如果单击外部链接，还可以用Referer消息头将他们传送到其它站点。因此，请勿使用查询字符串传送任何敏感信息。</p>
<h4 id="POST方法"><a href="#POST方法" class="headerlink" title="POST方法"></a>POST方法</h4><p>执行操作，使用这个方法可以在URL查询字符串与消息主体中发送请求参数。许多维护URL日志的位置及Referer消息头也将这些参数排除在外。因为POST方法旨在执行操作，如果用户单击浏览器上的“后退”按钮，返回一个这种方法返回的页面，那么浏览器不会自动重新发送请求，而是就即将发生的操作向用户发出警告。这样做可防止用户无意中多次执行同一个操作。因此在执行某已操作事必须使用POST请求。</p>
<h4 id="HEAD方法"><a href="#HEAD方法" class="headerlink" title="HEAD方法"></a>HEAD方法</h4><p>功能与GET相似，不同之处在于不会在其响应中返回消息主体。服务器返回的消息头应与对应GET请求返回的消息头相同。因此，这种方法可用于检查某一资源在向其提交GET请求前是否存在。</p>
<h4 id="TRACE方法"><a href="#TRACE方法" class="headerlink" title="TRACE方法"></a>TRACE方法</h4><p>用于诊断，服务器应在相应主体中返回其受到的请求消息的具体内容这种方法可用于检测客户端与服务器之间是否存在任何操作请求的代理服务器。</p>
<h4 id="OPTIONS方法"><a href="#OPTIONS方法" class="headerlink" title="OPTIONS方法"></a>OPTIONS方法</h4><p>要求服务器报告对某一特殊资源有效的HTTP方法，服务器通常返回一个包含Allow消息头的相应，并在其中列出所有有效的方法。</p>
<h4 id="PUT方法"><a href="#PUT方法" class="headerlink" title="PUT方法"></a>PUT方法</h4><p>这个方法试图使用包含在请求主体中的内容，向服务器上传制定的资源。如果激活这个方法，渗透测试员就可以利用它来攻击应用程序，例如，通过上传任意一段脚本并在服务器上执行该脚本来攻击应用程序。</p>
<h3 id="四、URL"><a href="#四、URL" class="headerlink" title="四、URL"></a>四、URL</h3><p>同一资源定位符是标识WEB资源的唯一标识符，通过它可以获取其标识的资源。</p>
<h3 id="五、常用消息头："><a href="#五、常用消息头：" class="headerlink" title="五、常用消息头："></a>五、常用消息头：</h3><ul>
<li>Connection ：用于告诉通信的另一端，在完成HTTP传输后是关系TCP连接，还是保持连接开放以接收其他消息。    </li>
<li>Content-Encoding ：为消息主体中的内容制定编码形式（如gzip），一些应用程序使用它来压缩相应以加快传输速度。</li>
<li>Content-Length ：用于规定消息主体的字节长度。</li>
<li>Content-Type ：用于规定消息主体的内容类型。例如，HTML文档的内容类型为text/html</li>
<li>Transfer-Encoding：指定为方便其通过HTTP传输而对消息主体使用的任何编码。如果使用这个消息头，通常用它指定块编码。</li>
</ul>
<h3 id="六、请求消息头："><a href="#六、请求消息头：" class="headerlink" title="六、请求消息头："></a>六、请求消息头：</h3><ul>
<li>accept：用于告诉服务器客户端愿意接受哪些内容，如图像类型，办公文档格式等。</li>
<li>Accept-Encoding：用于告诉服务器，客户端愿意接受哪些内容编码。</li>
<li>Authorization：用于为一种内置的HTTP身份验证向服务器提交证书。</li>
<li>Host：用于指定出现在所请求的完整URL中的主机名称。</li>
<li>Cookie：用于提交服务器向客户端发布的其他参数。</li>
<li>If-Modified-Since：用于说明浏览器最后一次受到所请求的资源的时间。</li>
<li>Origin：用在跨域Ajax请求中，用于指示提出请求的域。</li>
<li>Referer：用于指示提出当前请求的原始URL。</li>
<li>User-Agent：提供与浏览器或生成请求的其他客户端软件有关的信息，请注意，由于历史原因，大多数浏览器中都包含Mozilla前缀。</li>
</ul>
<h3 id="七、响应消息头："><a href="#七、响应消息头：" class="headerlink" title="七、响应消息头："></a>七、响应消息头：</h3><ul>
<li>Access-Control-Allow-Origin：用于指示可否通过跨域Ajax请求获取资源。</li>
<li>Cache-Control：用于向浏览器传送缓存指令（如no-cache）。只能用于http 1.1</li>
<li>ETag：用于指定一个实体标签。</li>
<li>Expires：用于向浏览器说明消息主体内容的有效时间。</li>
<li>Location。 ：用于在重定向响应（那些状态吗以3开头的响应）中说明重定向的目标。</li>
<li>Pragma：用于向浏览器（http 1.0 和http 1.1）。</li>
<li>Server：提供所使用的Web服务器软件的相关信息。</li>
<li>Set-Cookie ：用于向浏览器发布cookie，浏览器会在随后的请求中将其返回给服务器。</li>
<li>WWW-Authenticate ：用在带401状态码的响应中，提供与服务器所支持的身份验证类型有关的信息。</li>
<li>X-Frame-Options：指示浏览器框架是否及如何加载当前响应。</li>
</ul>
<h3 id="八、cookie"><a href="#八、cookie" class="headerlink" title="八、cookie"></a>八、cookie</h3><p>是大多数Web应用程序所依赖2的HTTP协议的一个关键组成部分，攻击者常常通过它来利用Web应用程序中的漏洞。服务器使用cookie机制向客户端发送数据，客户端保存cookie并将其返回给服务器。与其他类型的请求参数（存在于URL查询字符串或消息主体中）不同，无需应用程序或用户采取任何特殊措施，随后的一个每一个请求都会继续重新向服务器提交cookie。服务器使用Set-Cookie响应消息头发布cookie：<br><img src="http://i.imgur.com/vKcpUvq.png" alt=""><br>用于向浏览器发布cookie，然后，用户的浏览器自动将下面的消息头添加到随后返回给同一服务器的请求中。<br><img src="http://i.imgur.com/ELSftp6.png" alt=""><br>cookie一般由一个名/值对构成，但也可包含任何不含空格的字符串。可以在服务器响应中使用几个Set-Cookie消息头发布多个cookie, 并可在同一个cookie消息头中分隔不同的cookie，将他们全部返回给服务器。</p>
<p>除cookie的实际值外，Set-Cookie消息头还可包含以下任何可选属性，用它们控制浏览器处理cookie的方式。    </p>
<ul>
<li>Expires：用于设定cookie的有效时间。。这样会使浏览器将cookie保存在永久性的存储器中，在随后的浏览器会话中重复利用，直到到期时间为止。如果没有设定这个属性，那么cookie仅用在当前浏览器会话中。</li>
<li>Domain：用于指定cookie的有效域。这个域必须和收到cookie的域相同，或者是它的父域。</li>
<li>Path用：于指定cookie的有效URL路径。</li>
<li>Secure：如果设置这个属性，则仅在HTTPS请求中提交cookie。</li>
<li>HttpOnly：如果设置这个属性，将无法通过客户端JavaScript直接访问cookie。</li>
</ul>
<h3 id="九、状态码"><a href="#九、状态码" class="headerlink" title="九、状态码"></a>九、状态码</h3><p>每条HTTP相应消息都必须在第一行中包含一个状态码，说明请求的结果。</p>
<ul>
<li>1xx—-提供信息</li>
<li>2xx—-请求被成功提交。</li>
<li>3xx—-客户端被重定向到其他资源。</li>
<li>4xx—-请求包含某种错误。</li>
<li>5xx—-服务器执行请求时遇到错误。</li>
</ul>
<h4 id="100-Continue"><a href="#100-Continue" class="headerlink" title="100 Continue"></a>100 Continue</h4><p>当客户端提交一个包含主体的请求时，将发送这个响应。改响应表示已收到请求消息头，客户端应继续发送主体。请求完成后，再由服务器返回另一个响应。</p>
<h4 id="200-Ok"><a href="#200-Ok" class="headerlink" title="200 Ok"></a>200 Ok</h4><p>本状态码表示已成功提交请求，且响应主体中包含请求结果。</p>
<h4 id="201-Created"><a href="#201-Created" class="headerlink" title="201 Created"></a>201 Created</h4><p>PUT请求的响应返回这个状态码，表示请求以成功提交。</p>
<h4 id="301-Moved-Permanently"><a href="#301-Moved-Permanently" class="headerlink" title="301 Moved Permanently"></a>301 Moved Permanently</h4><p>将浏览器永久重定向到另外一个在Location消息头中指定的URl。</p>
<h4 id="302-Found。"><a href="#302-Found。" class="headerlink" title="302 Found。"></a>302 Found。</h4><p>本状态码将浏览器暂时重定向到另外一个在Location消息头中指定的URL。客户端应在随后的请求中恢复使用原始URL。</p>
<h4 id="304-Not-Modified。"><a href="#304-Not-Modified。" class="headerlink" title="304 Not Modified。"></a>304 Not Modified。</h4><p>本状态码指示浏览器使用缓存中保存的所请求资源的副本。服务器使用IF-Modified-Since与If-None-Match消息头确定客户端是否拥有最新版本的资源。</p>
<h4 id="400-Bad-Request。"><a href="#400-Bad-Request。" class="headerlink" title="400 Bad Request。"></a>400 Bad Request。</h4><p>本状态码表示客户端提交了一个无效的HTTP请求。当以某种无效的方式修改请求时（例如在URL中插入一个空格符），可能会遇到这个状态码。</p>
<h4 id="401-Unauthorized。"><a href="#401-Unauthorized。" class="headerlink" title="401 Unauthorized。"></a>401 Unauthorized。</h4><p>服务器在许可请求前要求HTTP进行身份验证。WWW-Authenticate消息头详细说明所支持的身份验证类型。</p>
<h4 id="403-Forbidden。"><a href="#403-Forbidden。" class="headerlink" title="403  Forbidden。"></a>403  Forbidden。</h4><p>不管是否通过身份验证，禁止任何人访问被请求的资源。</p>
<h4 id="404-Not-Found。"><a href="#404-Not-Found。" class="headerlink" title="404 Not Found。"></a>404 Not Found。</h4><p>本状态码表示所请求的资源并不存在。 </p>
<h4 id="405-Method-Not-Allowed。"><a href="#405-Method-Not-Allowed。" class="headerlink" title="405 Method Not Allowed。"></a>405 Method Not Allowed。</h4><p>本状态码表示指定URL的不支持的请求中的使用的方法。例如，如果试图在不支持PUT方法的地方使用该方法，就会收到本状态码。</p>
<h4 id="413-Request-Entity-Too-Large。"><a href="#413-Request-Entity-Too-Large。" class="headerlink" title="413 Request Entity Too Large。"></a>413 Request Entity Too Large。</h4><p>如果在本地代码中探查缓冲器溢出漏洞并就此提交超长数据串，则本状态码表示请求主体过长，服务器无法处理。</p>
<h4 id="414-Request-URI-Too-Long。"><a href="#414-Request-URI-Too-Long。" class="headerlink" title="414 Request URI Too Long。"></a>414 Request URI Too Long。</h4><p>与前一个响应类似，本状态码表示请求中的URL过长，服务器无法处理。</p>
<h4 id="500-Internal-Server-Error。"><a href="#500-Internal-Server-Error。" class="headerlink" title="500 Internal Server Error。"></a>500 Internal Server Error。</h4><p>本状态码表示服务器在执行请求时遇到错误。当提交无法预料的输入、在应用程序处理过程中造成无法处理的错误时，通常会收到本状态码。应该仔细检查服务器响应的所有内容，了解与错误性质有关的详情。</p>
<h4 id="503-Server-Unavailable。"><a href="#503-Server-Unavailable。" class="headerlink" title="503 Server Unavailable。"></a>503 Server Unavailable。</h4><p>通常，本状态码表示尽管Web服务器运转正常，并且能够响应请求，但服务器访问的应用程序还是无法做出响应。应该进行核实，是否因为执行了某种行为而造成这个结果。</p>
<h3 id="十、编码方案"><a href="#十、编码方案" class="headerlink" title="十、编码方案"></a>十、编码方案</h3><p>字符串是一种数据类型，但是，字符串比较特殊的是还有一个编码问题。因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。</p>
<h4 id="ASCII编码："><a href="#ASCII编码：" class="headerlink" title="ASCII编码："></a>ASCII编码：</h4><p>由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号。ASCII编码是1个字节。<br>Unicode：<br>Unicode把所有语言都统一到一套编码里。Unicode标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。<br>攻击Web应用程序时之所以要用到Unicode编码，主要在于有时可用它来破坏输人确认机制。 如果输人过滤阻止了某些恶意表达式，但随后处理输人的组件识别Unicode编码，就可以使用各 种标准与畸形Unicode编码避开过滤。</p>
<h4 id="UTF-8编码："><a href="#UTF-8编码：" class="headerlink" title="UTF-8编码："></a>UTF-8编码：</h4><p>本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间。ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。UTF-8编码的多字节字符以%为前缀，其后用十六进制表示每个字节。</p>
<p>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：</p>
<p><img src="http://i.imgur.com/pT7dsie.png" alt=""></p>
<p>计算机系统通用的字符编码工作方式：在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。</p>
<h4 id="URL编码："><a href="#URL编码：" class="headerlink" title="URL编码："></a>URL编码：</h4><p>URL只允许使用US-ASCII字符集中的可打印字符（也就是ASCII代码在0x20 ~ 0x7e范围内的 字符)。<br>常见的URL编码字符：</p>
<ul>
<li>%3d代表=;</li>
<li>%25代表%;</li>
<li>%20代表空格；</li>
<li>%0a代表新行；</li>
<li>%00代表空字节。<br>另一个值得注意的编码字符是加号（ + )，它代表URL编码的空格（除%20代表空格外)。</li>
</ul>
<h4 id="HTML-编码："><a href="#HTML-编码：" class="headerlink" title="HTML 编码："></a>HTML 编码：</h4><p>HTML编码是一种用于表示问题字符以将其安全并人HTML文档的方案。HTML编码主要在探査跨站点脚本漏洞时发挥作用。如果应用程序 在响应中返回未被修改的用户输人，那么它可能易于受到攻击；但是，如果它对危险字符进行 HTML编码，也许比较安全。<br>HTML编码定义了大量HTML实体来表示特殊的字面量字符。</p>
<ul>
<li>&quot;代表”;</li>
<li>&apos;代表 ‘;</li>
<li>&amp;代表 &amp;;</li>
<li>&lt;代表 &lt;;</li>
<li>&gt;代表 &gt;</li>
</ul>
<h4 id="Base64-编码："><a href="#Base64-编码：" class="headerlink" title="Base64 编码："></a>Base64 编码：</h4><p>Base64编码仅用一个可打印的ASCII字符就可安全转换任何二进制数据，它常用于对电子邮 件附件进行编码，使其通过SMTP安全传输。它还可用于在基本HTTP验证机制中对用户证书进行编码。<br>Web应用程序利用Base64编码在cookie与其他参数中传送二进制数据，甚至用它打乱敏感数据以防止即使是细微的修改。应该总是留意并解码发送到客户端的任何Base64数据。由于这 些数据使用特殊的字符集，而且有时会在字符串末尾添加补足字符（ = ),因此可以轻易辨别出 Base64编码的字符串。（如果最后的输人数据块不能构成3段输出数据，就用一个或两个等号（=)补足输出）</p>
<h4 id="十六进制编码："><a href="#十六进制编码：" class="headerlink" title="十六进制编码："></a>十六进制编码：</h4><p>许多应用程序在传送二进制数据时直接使用十六进制编码，用ASCII字符表示十六进制数据块。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;超文本传输协议（HTTP协议）：访问万维网使用的核心通信协议，也是今天所有web应用程序使用的通讯协议&lt;br&gt;
    
    </summary>
    
      <category term="协议" scheme="http://yoursite.com/categories/%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>WEB踩点</title>
    <link href="http://yoursite.com/2016/09/22/WEB%E8%B8%A9%E7%82%B9/"/>
    <id>http://yoursite.com/2016/09/22/WEB踩点/</id>
    <published>2016-09-22T05:25:55.000Z</published>
    <updated>2016-09-22T06:22:24.348Z</updated>
    
    <content type="html"><![CDATA[<p>对于白帽子来说，在开始渗透之前，必须先完成信息收集，那么信息收集的第一步是什么呢？就是WEB踩点。<br><a id="more"></a></p>
<h3 id="什么是踩点"><a href="#什么是踩点" class="headerlink" title="什么是踩点"></a>什么是踩点</h3><p>踩点：就是对指定目标进行系统的网站信息收集，攻击者将尽可能多的收集目标单位的安全情况的方方面面。</p>
<h3 id="为什么要踩点"><a href="#为什么要踩点" class="headerlink" title="为什么要踩点"></a>为什么要踩点</h3><p>知己知彼，百战不殆。<br>每个人都有自己的习惯、思维方式，发掘他的习惯、思维方式，就是他的弱点。踩点是最辛苦的任务之一，它也是最枯燥的，同样也是最重要的任务之一。</p>
<h3 id="WEB踩点的常见手段"><a href="#WEB踩点的常见手段" class="headerlink" title="WEB踩点的常见手段"></a>WEB踩点的常见手段</h3><h4 id="0x01-网站共享主机（旁注）"><a href="#0x01-网站共享主机（旁注）" class="headerlink" title="0x01  网站共享主机（旁注）"></a>0x01  网站共享主机（旁注）</h4><p>旁注是网络上比较流行的一种入侵方法，在字面上解释就是”从旁注入”，利用同一主机上面不同网站的漏洞得到 webshell，从而利用主机上的程序或者是服务所暴露的用户所在的物理路径进行入侵。<br>网站共享主机漏洞是更为严谨的学术叫法。    </p>
<ul>
<li><p>关于c段旁注<br>旁注与C段嗅探的意义，旁注的意思就是从同台服务器上的其他网站入手，提权，然后把服务器端了，就自然把那个网站端了。C段嗅探，每个IP有 ABCD 四个段，举个例子192.168.0.1，A段就是192，B段是168，C段0，D 段是1，而C段嗅探的意思就是拿下它同一C段中的其中一台服务器，也就是说是D段1-255 中的一台服务器，然后利用工具嗅探拿下该服务。     </p>
</li>
<li><p>旁站入侵和C段入侵哪个更理想<br>旁站入侵更为理想。C段嗅探还涉及到提权，ARP。还要等待管理员登陆，才能抓取到密码。</p>
</li>
<li><p>常用工具<br>k8_c段旁注查询工具</p>
</li>
</ul>
<h4 id="0x02-WHOIS服务"><a href="#0x02-WHOIS服务" class="headerlink" title="0x02  WHOIS服务"></a>0x02  WHOIS服务</h4><p>利用whois服务，可以获取与目标相关的具体信息，包括注册人邮箱，IP地址，公司DNS主机名以及地址和电话号码等信息。</p>
<ul>
<li>whois信息一定可以查到所需要信息的吗？如果查不到是什么原因？<br>不一定哦，稍微有安全意识的注册人会设置隐私保护</li>
<li>常用工具<br>站长之家，爱站网</li>
</ul>
<h4 id="0x03-二级域名"><a href="#0x03-二级域名" class="headerlink" title="0x03  二级域名"></a>0x03  二级域名</h4><ul>
<li>搜索引擎 site指令<br>百度，谷歌，必应</li>
<li>dns区域传送/域名暴力枚举<br>fierce 是使用多种技术来扫描目标主机IP地址和主机名的一个DNS服务枚举工具。<br>工作原理：先通过查询本地DNS服务器来查询目标DNS服务器，然后使用目标DNS服务器来查找子域名。<br>具体命令：fierce -dns ccb.com -threads（线程数） 100</li>
</ul>
<h4 id="0x04-CDN后的真实IP"><a href="#0x04-CDN后的真实IP" class="headerlink" title="0x04 CDN后的真实IP"></a>0x04 CDN后的真实IP</h4><ul>
<li><p>CDN概述<br>CDN的全称是Content Delivery Network，即内容分发网络。其基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。其目的是使用户可就近取得所需内容，解决Internet网络拥挤的状况，提高用户访问网站的响应速度。</p>
</li>
<li><p>获得真实IP的方法<br>phpinfo中的server_addr的IP地址百分百是真实服务器的IP地址。<br>先看主站是否有phpinfo的页面，如果没有的话就查看他的二级域名中是否存在phpinfo页面.</p>
</li>
</ul>
<h4 id="0x05-c段子网网关"><a href="#0x05-c段子网网关" class="headerlink" title="0x05 c段子网网关"></a>0x05 c段子网网关</h4><p>通过路由跟踪排除c段不同网关邻居主机。    </p>
<ul>
<li><p>windows下的命令：只支持icmp（ping）协议，有些服务器会丢弃icmp协议    </p>
<pre><code>tracert [-d] [-h maximum_hops] [-j host-list] [-w timeout] [-R] [-S srcaddr] [-4] [-6] target_name

-d                 不将地址解析成主机名。
-h maximum_hops    搜索目标的最大跃点数。
-j host-list       与主机列表一起的松散源路由(仅适用于 IPv4)。
-w timeout         等待每个回复的超时时间(以毫秒为单位)。
-R                 跟踪往返行程路径(仅适用于 IPv6)。
-S srcaddr         要使用的源地址(仅适用于 IPv6)。
-4                 强制使用 IPv4。
-6                 强制使用 IPv6。
</code></pre></li>
</ul>
<ul>
<li><p>linux下的命令：     </p>
<pre><code>traceroute -n -T -p 53 ip地址    
traceroute -n -T -p 80 //优先    
traceroute -n -I -p 80 //优先    
traceroute -T  -p 80     
-n 不解析主机名    
-p指定端口    
-T指定协议为TCP    
-S指定发送源端口   
</code></pre></li>
</ul>
<h4 id="0x06-IDC机房ISP信息"><a href="#0x06-IDC机房ISP信息" class="headerlink" title="0x06 IDC机房ISP信息"></a>0x06 IDC机房ISP信息</h4><ul>
<li>通过ip查询    <pre><code>nmap -Pn -n -sC -sV -p 80 211.147.4-6.1-254     
</code></pre>扫描目标网段的http-title，获取路由器title.</li>
</ul>
<ul>
<li>全球注册信息管理机构：<br>北美  arin.net<br>欧洲  ripe.net<br>亚洲  www.apnic.net<br>拉丁美洲/加勒比  whois.lacnic.net</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于白帽子来说，在开始渗透之前，必须先完成信息收集，那么信息收集的第一步是什么呢？就是WEB踩点。&lt;br&gt;
    
    </summary>
    
      <category term="渗透" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="WEB" scheme="http://yoursite.com/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>IIS写权限漏洞</title>
    <link href="http://yoursite.com/2016/09/19/IIS%E5%86%99%E6%9D%83%E9%99%90/"/>
    <id>http://yoursite.com/2016/09/19/IIS写权限/</id>
    <published>2016-09-19T00:48:19.000Z</published>
    <updated>2016-09-21T02:03:16.642Z</updated>
    
    <content type="html"><![CDATA[<p>IIS写权限漏洞，说白了就是菜鸟管理员对IIS的错误配置问题：  </p>
<ul>
<li>WEB服务器扩展里设置WebDAV为允许；  </li>
<li>网站权限配置开启了写入权限与脚本资源访问权限。 <a id="more"></a>
</li>
</ul>
<h3 id="先在Windows-server2003中搭建好实验环境。"><a href="#先在Windows-server2003中搭建好实验环境。" class="headerlink" title="先在Windows server2003中搭建好实验环境。"></a>先在Windows server2003中搭建好实验环境。</h3><ul>
<li>WEB服务器扩展里设置WebDAV和Active Server Pages为允许；  </li>
<li>网站主目录权限配置开启写入权限与脚本资源访问权限；  </li>
<li>TCP端口为80；  </li>
<li>主目录属性-安全中来宾用户的权限为完全控制。</li>
</ul>
<h3 id="使用桂林老兵的IISwriter"><a href="#使用桂林老兵的IISwriter" class="headerlink" title="使用桂林老兵的IISwriter"></a>使用桂林老兵的IISwriter</h3><p><img src="http://i.imgur.com/dXNHb7g.png" alt=""><br>然后提交数据包，会在服务端生成一个test.txt的文件  </p>
<p><img src="http://i.imgur.com/90B933M.png" alt=""><br>但是这个问津不能被IIS解析，所以要用move，主要目的是为了将txt的文件修改为asp，从而变成可执行的脚本文件。  </p>
<p><img src="http://i.imgur.com/Qh4uVLK.png" alt=""><br>看一下，确实存在shell.asp文件  </p>
<p><img src="http://i.imgur.com/8vuWmRI.png" alt="">  </p>
<h3 id="用菜刀链接"><a href="#用菜刀链接" class="headerlink" title="用菜刀链接"></a>用菜刀链接</h3><p><img src="http://i.imgur.com/T1V0CU0.png" alt=""></p>
<h3 id="菜刀成功链接"><a href="#菜刀成功链接" class="headerlink" title="菜刀成功链接"></a>菜刀成功链接</h3><p><img src="http://i.imgur.com/beIwEEv.png" alt=""><br>成功拿到shel！</p>
<h3 id="错误集锦"><a href="#错误集锦" class="headerlink" title="错误集锦"></a>错误集锦</h3><ul>
<li>无法上传txt文件</li>
</ul>
<p><img src="http://i.imgur.com/f0t8J5i.png" alt=""><br>原因：没有写入权限</p>
<p><img src="http://i.imgur.com/9r8IOzs.png" alt=""><br>原因：TCP端口不是80</p>
<p><img src="http://i.imgur.com/cCDvQW8.png" alt=""><br>原因：WEB服务器扩展里没有设置WebDAV为允许</p>
<ul>
<li>无法更改txt文件为asp文件</li>
</ul>
<p><img src="http://i.imgur.com/fu790mL.png" alt=""></p>
<ul>
<li>菜刀出现故障</li>
</ul>
<p><img src="http://i.imgur.com/uLwjk2W.png" alt=""><br>原因：WEB服务器扩展里没有设置Active Server Pages为允许</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IIS写权限漏洞，说白了就是菜鸟管理员对IIS的错误配置问题：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WEB服务器扩展里设置WebDAV为允许；  &lt;/li&gt;
&lt;li&gt;网站权限配置开启了写入权限与脚本资源访问权限。
    
    </summary>
    
      <category term="漏洞" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
      <category term="IIS" scheme="http://yoursite.com/tags/IIS/"/>
    
  </entry>
  
  <entry>
    <title>php复制整个文件目录的实现</title>
    <link href="http://yoursite.com/2016/09/10/php%E5%A4%8D%E5%88%B6%E6%95%B4%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2016/09/10/php复制整个文件目录的实现/</id>
    <published>2016-09-10T03:33:29.000Z</published>
    <updated>2016-09-21T02:03:02.142Z</updated>
    
    <content type="html"><![CDATA[<p>利用函数实现文件目录的复制<br><a id="more"></a></p>
<h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><pre><code>function cpdir($directory,$ddirectory)
{    
//判断给定路径是否存在
if (file_exists($directory)&amp;&amp;file_exists($ddirectory)) 
{   
    //获取句柄
    if ($handle=opendir($directory)) 
    {   
        //遍历
        while ($file=readdir($handle)) 
        {
            if ($file!=&apos;.&apos; &amp;&amp; $file!=&apos;..&apos;) 
            {   
                //拼接
                $subfile=$directory.&apos;/&apos;.$file;
                $susfile=$ddirectory.&apos;/&apos;.$file;
                if (is_dir($subfile))
                 {

                    mkdir(&quot;$susfile&quot;);
                    cpdir($subfile,$susfile);
                }
                if (is_file($subfile)) 
                {
                    copy($subfile,$susfile );
                }

            }
        }
        closedir($handle);
    }
}
}

cpdir(&apos;./re02&apos;,&apos;./cp&apos;);`
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用函数实现文件目录的复制&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>hello word</title>
    <link href="http://yoursite.com/2015/08/23/hello-world/"/>
    <id>http://yoursite.com/2015/08/23/hello-world/</id>
    <published>2015-08-23T07:32:58.000Z</published>
    <updated>2016-09-19T03:49:10.365Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
